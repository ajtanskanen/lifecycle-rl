'''

    empstats.py

    statistics to be compared againt simulation results

'''

import numpy as np
from scipy.interpolate import interp1d

class Empstats():
    def __init__(self,year=2018,max_age=70,n_groups=6,timestep=0.25,n_time=210,min_age=18):
        self.year=year
        self.max_age=max_age
        self.n_groups=n_groups
        self.timestep=timestep
        self.n_time=n_time
        self.min_age=min_age
        self.inv_timestep=int(np.round(1/self.timestep)) # pitää olla kokonaisluku

    def emp_stats(self,g=0,tyossakayntitutkimus=True):
        if tyossakayntitutkimus:
            return self.emp_stats_tyossakayntitutkimus(g=g)
        else:
            return self.emp_stats_tyovoimatutkimus(g=g)
        
    def emp_stats_tyossakayntitutkimus(self,g=0):
        '''
        työssä olevien osuus väestöstö
        Lähde: Tilastokeskus, työssäkäyntitutkimus
        '''
        if self.year==2018:
            if g==0: # kaikki
                emp=np.array([0.299,0.455,0.464,0.548,0.569,0.602,0.649,0.682,0.709,0.732,0.743,0.755,0.761,0.772,0.779,0.784,0.791,0.798,0.806,0.811,0.812,0.824,0.824,0.833,0.835,0.837,0.836,0.832,0.832,0.829,0.825,0.821,0.819,0.816,0.811,0.806,0.799,0.791,0.776,0.766,0.753,0.730,0.686,0.630,0.568,0.382,0.218,0.143,0.108,0.088,0.012,0.003,0.002])
            elif g==1: # naiset
                emp=np.array([0.34,0.531,0.556,0.569,0.587,0.623,0.669,0.688,0.705,0.726,0.729,0.737,0.744,0.751,0.756,0.766,0.772,0.780,0.792,0.797,0.801,0.817,0.821,0.832,0.836,0.839,0.840,0.839,0.837,0.840,0.836,0.835,0.831,0.831,0.828,0.825,0.819,0.815,0.802,0.794,0.782,0.761,0.715,0.665,0.596,0.401,0.222,0.137,0.100,0.082,0.012,0.004,0.003])
            else: # miehet
                emp=np.array([0.257,0.384,0.377,0.527,0.553,0.582,0.629,0.676,0.713,0.737,0.755,0.772,0.777,0.792,0.801,0.802,0.808,0.815,0.818,0.823,0.823,0.830,0.828,0.835,0.834,0.835,0.833,0.825,0.826,0.817,0.815,0.807,0.807,0.801,0.793,0.786,0.780,0.768,0.750,0.738,0.724,0.698,0.655,0.594,0.539,0.362,0.214,0.149,0.116,0.095,0.012,0.002,0.002])
        elif self.year==2019:
            if g==0: # kaikki
                emp=np.array([0.311,0.473,0.469,0.543,0.566,0.599,0.639,0.682,0.710,0.723,0.742,0.751,0.757,0.762,0.768,0.777,0.780,0.787,0.795,0.803,0.806,0.810,0.819,0.821,0.831,0.831,0.832,0.832,0.825,0.826,0.824,0.821,0.816,0.813,0.809,0.803,0.794,0.787,0.781,0.765,0.752,0.731,0.700,0.649,0.593,0.460,0.243,0.160,0.118,0.091,0.025,0.013,0.010])
            elif g==1: # naiset
                emp=np.array([0.36,0.552,0.563,0.570,0.592,0.621,0.658,0.698,0.717,0.720,0.733,0.737,0.737,0.745,0.743,0.754,0.761,0.769,0.778,0.790,0.795,0.802,0.815,0.819,0.831,0.834,0.838,0.840,0.835,0.835,0.838,0.834,0.832,0.829,0.827,0.825,0.816,0.809,0.808,0.794,0.782,0.762,0.731,0.680,0.627,0.486,0.255,0.162,0.118,0.088,0.022,0.011,0.008])
            else: # miehet
                emp=np.array([0.261,0.400,0.382,0.518,0.541,0.577,0.621,0.667,0.704,0.727,0.751,0.764,0.777,0.778,0.792,0.798,0.798,0.803,0.810,0.815,0.817,0.817,0.823,0.823,0.830,0.828,0.827,0.824,0.816,0.819,0.811,0.808,0.800,0.796,0.791,0.782,0.772,0.766,0.754,0.737,0.721,0.699,0.667,0.617,0.557,0.434,0.230,0.159,0.118,0.094,0.027,0.015,0.012])
        elif self.year==2020:
            if g==0: # kaikki, päivitä
                emp=np.array([0.2450,0.3863,0.4067,0.4794,0.5080,0.5493,0.5959,0.6385,0.6695,0.6926,0.7054,0.7184,0.7260,0.7330,0.7367,0.7456,0.7518,0.7574,0.7640,0.7709,0.7786,0.7841,0.7880,0.7960,0.7979,0.8061,0.8064,0.8087,0.8064,0.7986,0.8024,0.7993,0.7949,0.7883,0.7857,0.7810,0.7725,0.7660,0.7584,0.7507,0.7320,0.7119,0.6808,0.6408,0.5906,0.5097,0.2533,0.1680,0.1302,0.1034,0.0283,0.0189,0.0173])
            elif g==1: # naiset
                emp=np.array([0.27872191,0.46668750,0.48756461,0.50132780,0.52822940,0.57162008,0.61447015,0.65207289,0.68104614,0.69525622,0.70121260,0.71138351,0.71381848,0.71475391,0.72094158,0.72665638,0.73495882,0.74518506,0.75162681,0.76311857,0.77124827,0.77934887,0.78740274,0.79854477,0.80289148,0.81486582,0.81750220,0.82029935,0.81995946,0.81281520,0.81818485,0.81812944,0.81284700,0.81025139,0.80748693,0.80556559,0.79804479,0.79377046,0.78685377,0.78187075,0.76494694,0.74941560,0.71813946,0.67638075,0.62580700,0.54105315,0.27132156,0.17227402,0.13269015,0.10598192,0.02379934,0.01511777,0.01067221])
            else: # miehet
                emp=np.array([0.21306,0.30980,0.33169,0.45898,0.48906,0.52810,0.57858,0.62573,0.65848,0.69003,0.70925,0.72497,0.73741,0.75003,0.75144,0.76318,0.76760,0.76879,0.77565,0.77819,0.78536,0.78856,0.78862,0.79349,0.79324,0.79770,0.79597,0.79775,0.79330,0.78512,0.78726,0.78086,0.77734,0.76691,0.76425,0.75676,0.74717,0.73830,0.72995,0.71938,0.69883,0.67368,0.64220,0.60415,0.55399,0.47704,0.23441,0.16352,0.12737,0.10055,0.03328,0.02310,0.01728])
        elif self.year==2021: # päivitä
            if g==0: # kaikki, päivitä
                emp=np.array([0.2450,0.3863,0.4067,0.4794,0.5080,0.5493,0.5959,0.6385,0.6695,0.6926,0.7054,0.7184,0.7260,0.7330,0.7367,0.7456,0.7518,0.7574,0.7640,0.7709,0.7786,0.7841,0.7880,0.7960,0.7979,0.8061,0.8064,0.8087,0.8064,0.7986,0.8024,0.7993,0.7949,0.7883,0.7857,0.7810,0.7725,0.7660,0.7584,0.7507,0.7320,0.7119,0.6808,0.6408,0.5906,0.5097,0.2533,0.1680,0.1302,0.1034,0.0283,0.0189,0.0173])
            elif g==1: # naiset
                emp=np.array([0.27872191,0.46668750,0.48756461,0.50132780,0.52822940,0.57162008,0.61447015,0.65207289,0.68104614,0.69525622,0.70121260,0.71138351,0.71381848,0.71475391,0.72094158,0.72665638,0.73495882,0.74518506,0.75162681,0.76311857,0.77124827,0.77934887,0.78740274,0.79854477,0.80289148,0.81486582,0.81750220,0.82029935,0.81995946,0.81281520,0.81818485,0.81812944,0.81284700,0.81025139,0.80748693,0.80556559,0.79804479,0.79377046,0.78685377,0.78187075,0.76494694,0.74941560,0.71813946,0.67638075,0.62580700,0.54105315,0.27132156,0.17227402,0.13269015,0.10598192,0.02379934,0.01511777,0.01067221])
            else: # miehet
                emp=np.array([0.21306,0.30980,0.33169,0.45898,0.48906,0.52810,0.57858,0.62573,0.65848,0.69003,0.70925,0.72497,0.73741,0.75003,0.75144,0.76318,0.76760,0.76879,0.77565,0.77819,0.78536,0.78856,0.78862,0.79349,0.79324,0.79770,0.79597,0.79775,0.79330,0.78512,0.78726,0.78086,0.77734,0.76691,0.76425,0.75676,0.74717,0.73830,0.72995,0.71938,0.69883,0.67368,0.64220,0.60415,0.55399,0.47704,0.23441,0.16352,0.12737,0.10055,0.03328,0.02310,0.01728])
        elif self.year==2022: # päivitä
            if g==0: # kaikki, päivitä
                emp=np.array([0.2450,0.3863,0.4067,0.4794,0.5080,0.5493,0.5959,0.6385,0.6695,0.6926,0.7054,0.7184,0.7260,0.7330,0.7367,0.7456,0.7518,0.7574,0.7640,0.7709,0.7786,0.7841,0.7880,0.7960,0.7979,0.8061,0.8064,0.8087,0.8064,0.7986,0.8024,0.7993,0.7949,0.7883,0.7857,0.7810,0.7725,0.7660,0.7584,0.7507,0.7320,0.7119,0.6808,0.6408,0.5906,0.5097,0.2533,0.1680,0.1302,0.1034,0.0283,0.0189,0.0173])
            elif g==1: # naiset
                emp=np.array([0.27872191,0.46668750,0.48756461,0.50132780,0.52822940,0.57162008,0.61447015,0.65207289,0.68104614,0.69525622,0.70121260,0.71138351,0.71381848,0.71475391,0.72094158,0.72665638,0.73495882,0.74518506,0.75162681,0.76311857,0.77124827,0.77934887,0.78740274,0.79854477,0.80289148,0.81486582,0.81750220,0.82029935,0.81995946,0.81281520,0.81818485,0.81812944,0.81284700,0.81025139,0.80748693,0.80556559,0.79804479,0.79377046,0.78685377,0.78187075,0.76494694,0.74941560,0.71813946,0.67638075,0.62580700,0.54105315,0.27132156,0.17227402,0.13269015,0.10598192,0.02379934,0.01511777,0.01067221])
            else: # miehet
                emp=np.array([0.21306,0.30980,0.33169,0.45898,0.48906,0.52810,0.57858,0.62573,0.65848,0.69003,0.70925,0.72497,0.73741,0.75003,0.75144,0.76318,0.76760,0.76879,0.77565,0.77819,0.78536,0.78856,0.78862,0.79349,0.79324,0.79770,0.79597,0.79775,0.79330,0.78512,0.78726,0.78086,0.77734,0.76691,0.76425,0.75676,0.74717,0.73830,0.72995,0.71938,0.69883,0.67368,0.64220,0.60415,0.55399,0.47704,0.23441,0.16352,0.12737,0.10055,0.03328,0.02310,0.01728])
        elif self.year==2023: # päivitä
            if g==0: # kaikki, päivitä
                emp=np.array([0.2450,0.3863,0.4067,0.4794,0.5080,0.5493,0.5959,0.6385,0.6695,0.6926,0.7054,0.7184,0.7260,0.7330,0.7367,0.7456,0.7518,0.7574,0.7640,0.7709,0.7786,0.7841,0.7880,0.7960,0.7979,0.8061,0.8064,0.8087,0.8064,0.7986,0.8024,0.7993,0.7949,0.7883,0.7857,0.7810,0.7725,0.7660,0.7584,0.7507,0.7320,0.7119,0.6808,0.6408,0.5906,0.5097,0.2533,0.1680,0.1302,0.1034,0.0283,0.0189,0.0173])
            elif g==1: # naiset
                emp=np.array([0.27872191,0.46668750,0.48756461,0.50132780,0.52822940,0.57162008,0.61447015,0.65207289,0.68104614,0.69525622,0.70121260,0.71138351,0.71381848,0.71475391,0.72094158,0.72665638,0.73495882,0.74518506,0.75162681,0.76311857,0.77124827,0.77934887,0.78740274,0.79854477,0.80289148,0.81486582,0.81750220,0.82029935,0.81995946,0.81281520,0.81818485,0.81812944,0.81284700,0.81025139,0.80748693,0.80556559,0.79804479,0.79377046,0.78685377,0.78187075,0.76494694,0.74941560,0.71813946,0.67638075,0.62580700,0.54105315,0.27132156,0.17227402,0.13269015,0.10598192,0.02379934,0.01511777,0.01067221])
            else: # miehet
                emp=np.array([0.21306,0.30980,0.33169,0.45898,0.48906,0.52810,0.57858,0.62573,0.65848,0.69003,0.70925,0.72497,0.73741,0.75003,0.75144,0.76318,0.76760,0.76879,0.77565,0.77819,0.78536,0.78856,0.78862,0.79349,0.79324,0.79770,0.79597,0.79775,0.79330,0.78512,0.78726,0.78086,0.77734,0.76691,0.76425,0.75676,0.74717,0.73830,0.72995,0.71938,0.69883,0.67368,0.64220,0.60415,0.55399,0.47704,0.23441,0.16352,0.12737,0.10055,0.03328,0.02310,0.01728])
        elif self.year==2024: # päivitä
            if g==0: # kaikki, päivitä
                emp=np.array([0.2450,0.3863,0.4067,0.4794,0.5080,0.5493,0.5959,0.6385,0.6695,0.6926,0.7054,0.7184,0.7260,0.7330,0.7367,0.7456,0.7518,0.7574,0.7640,0.7709,0.7786,0.7841,0.7880,0.7960,0.7979,0.8061,0.8064,0.8087,0.8064,0.7986,0.8024,0.7993,0.7949,0.7883,0.7857,0.7810,0.7725,0.7660,0.7584,0.7507,0.7320,0.7119,0.6808,0.6408,0.5906,0.5097,0.2533,0.1680,0.1302,0.1034,0.0283,0.0189,0.0173])
            elif g==1: # naiset
                emp=np.array([0.27872191,0.46668750,0.48756461,0.50132780,0.52822940,0.57162008,0.61447015,0.65207289,0.68104614,0.69525622,0.70121260,0.71138351,0.71381848,0.71475391,0.72094158,0.72665638,0.73495882,0.74518506,0.75162681,0.76311857,0.77124827,0.77934887,0.78740274,0.79854477,0.80289148,0.81486582,0.81750220,0.82029935,0.81995946,0.81281520,0.81818485,0.81812944,0.81284700,0.81025139,0.80748693,0.80556559,0.79804479,0.79377046,0.78685377,0.78187075,0.76494694,0.74941560,0.71813946,0.67638075,0.62580700,0.54105315,0.27132156,0.17227402,0.13269015,0.10598192,0.02379934,0.01511777,0.01067221])
            else: # miehet
                emp=np.array([0.21306,0.30980,0.33169,0.45898,0.48906,0.52810,0.57858,0.62573,0.65848,0.69003,0.70925,0.72497,0.73741,0.75003,0.75144,0.76318,0.76760,0.76879,0.77565,0.77819,0.78536,0.78856,0.78862,0.79349,0.79324,0.79770,0.79597,0.79775,0.79330,0.78512,0.78726,0.78086,0.77734,0.76691,0.76425,0.75676,0.74717,0.73830,0.72995,0.71938,0.69883,0.67368,0.64220,0.60415,0.55399,0.47704,0.23441,0.16352,0.12737,0.10055,0.03328,0.02310,0.01728])
        else:
            print('Empstats, unknown year',self.year)

        return self.map_ratios(emp)
        
    def emp_stats_tyovoimatutkimus(self,g=0):
        '''
        työssä olevien osuus väestöstö
        Lähde: Tilastokeskus, tyovoimatutkimus
        '''
        x=np.array([22.5,27.5,32.5,37.5,42.5,47.5,52.5,57.5,62.5,67.5,72.5])
        if self.year==2018:
            if g==0: # kaikki
                emp=np.array([58.6,73.5,77.3,82.4,85.9,85.0,84.6,78.0,51.0,13.9,7.2])/100
            elif g==1: # naiset
                emp=np.array([58.6,73.5,77.3,82.4,85.9,85.0,84.6,78.0,51.0,13.9,7.2])/100
            else: # miehet
                emp=np.array([58.6,73.5,77.3,82.4,85.9,85.0,84.6,78.0,51.0,13.9,7.2])/100
        elif self.year==2019:
            if g==0: # kaikki
                emp=np.array([58.7,75.1,78.0,82.8,85.9,87.4,84.0,78.1,53.5,15.0,7.1])/100
            elif g==1: # naiset
                emp=np.array([0.36,0.552,0.563,0.570,0.592,0.621,0.658,0.698,0.717,0.720,0.733,0.737,0.737,0.745,0.743,0.754,0.761,0.769,0.778,0.790,0.795,0.802,0.815,0.819,0.831,0.834,0.838,0.840,0.835,0.835,0.838,0.834,0.832,0.829,0.827,0.825,0.816,0.809,0.808,0.794,0.782,0.762,0.731,0.680,0.627,0.486,0.255,0.162,0.118,0.088,0.022,0.011,0.008])
            else: # miehet
                emp=np.array([0.261,0.400,0.382,0.518,0.541,0.577,0.621,0.667,0.704,0.727,0.751,0.764,0.777,0.778,0.792,0.798,0.798,0.803,0.810,0.815,0.817,0.817,0.823,0.823,0.830,0.828,0.827,0.824,0.816,0.819,0.811,0.808,0.800,0.796,0.791,0.782,0.772,0.766,0.754,0.737,0.721,0.699,0.667,0.617,0.557,0.434,0.230,0.159,0.118,0.094,0.027,0.015,0.012])
        elif self.year==2020:
            if g==0: # kaikki
                emp=np.array([55.1,73.6,77.8,81.8,85.3,86.2,83.7,77.9,54.7,14.1,6.9])/100
            elif g==1: # naiset
                emp=np.array([0.27872191,0.46668750,0.48756461,0.50132780,0.52822940,0.57162008,0.61447015,0.65207289,0.68104614,0.69525622,0.70121260,0.71138351,0.71381848,0.71475391,0.72094158,0.72665638,0.73495882,0.74518506,0.75162681,0.76311857,0.77124827,0.77934887,0.78740274,0.79854477,0.80289148,0.81486582,0.81750220,0.82029935,0.81995946,0.81281520,0.81818485,0.81812944,0.81284700,0.81025139,0.80748693,0.80556559,0.79804479,0.79377046,0.78685377,0.78187075,0.76494694,0.74941560,0.71813946,0.67638075,0.62580700,0.54105315,0.27132156,0.17227402,0.13269015,0.10598192,0.02379934,0.01511777,0.01067221])
            else: # miehet
                emp=np.array([0.21306,0.30980,0.33169,0.45898,0.48906,0.52810,0.57858,0.62573,0.65848,0.69003,0.70925,0.72497,0.73741,0.75003,0.75144,0.76318,0.76760,0.76879,0.77565,0.77819,0.78536,0.78856,0.78862,0.79349,0.79324,0.79770,0.79597,0.79775,0.79330,0.78512,0.78726,0.78086,0.77734,0.76691,0.76425,0.75676,0.74717,0.73830,0.72995,0.71938,0.69883,0.67368,0.64220,0.60415,0.55399,0.47704,0.23441,0.16352,0.12737,0.10055,0.03328,0.02310,0.01728])
        elif self.year==2021: # päivitä
            if g==0: # kaikki
                emp=np.array([57.8,75.0,79.9,83.0,86.1,85.8,84.2,79.4,56.9,16.0,8.1])/100
            elif g==1: # naiset
                emp=np.array([58.6,73.5,77.3,82.4,85.9,85.0,84.6,78.0,51.0,13.9,7.2])/100
            else: # miehet
                emp=np.array([58.6,73.5,77.3,82.4,85.9,85.0,84.6,78.0,51.0,13.9,7.2])/100
        elif self.year==2022: # päivitä
            if g==0: # kaikki
                emp=np.array([57.8,75.0,79.9,83.0,86.1,85.8,84.2,79.4,56.9,16.0,8.1])/100
            elif g==1: # naiset
                emp=np.array([58.6,73.5,77.3,82.4,85.9,85.0,84.6,78.0,51.0,13.9,7.2])/100
            else: # miehet
                emp=np.array([58.6,73.5,77.3,82.4,85.9,85.0,84.6,78.0,51.0,13.9,7.2])/100
        elif self.year==2023: # päivitä
            if g==0: # kaikki
                emp=np.array([57.8,75.0,79.9,83.0,86.1,85.8,84.2,79.4,56.9,16.0,8.1])/100
            elif g==1: # naiset
                emp=np.array([58.6,73.5,77.3,82.4,85.9,85.0,84.6,78.0,51.0,13.9,7.2])/100
            else: # miehet
                emp=np.array([58.6,73.5,77.3,82.4,85.9,85.0,84.6,78.0,51.0,13.9,7.2])/100
        elif self.year==2024: # päivitä
            if g==0: # kaikki
                emp=np.array([57.8,75.0,79.9,83.0,86.1,85.8,84.2,79.4,56.9,16.0,8.1])/100
            elif g==1: # naiset
                emp=np.array([58.6,73.5,77.3,82.4,85.9,85.0,84.6,78.0,51.0,13.9,7.2])/100
            else: # miehet
                emp=np.array([58.6,73.5,77.3,82.4,85.9,85.0,84.6,78.0,51.0,13.9,7.2])/100                
        else:
            print('Empstats, unknown year',self.year)
            
        f = interp1d(x, emp,fill_value='extrapolate')
        jasenyys_x = np.linspace(self.min_age, self.max_age+1, num=self.max_age-self.min_age+1, endpoint=True)
        rate=f(jasenyys_x)

        return self.map_ratios(rate)
        
    def disab_stat(self,g):
        '''
        Työkyvyttömyyselökkeellö olevien osuus väestöstö
        Lähde: ETK
        '''
        if self.year==2018:
            if g==1:
                ratio=np.array([0.00695,0.00917,0.01212,0.01522,0.01702,0.02006,0.01962,0.02080,0.02151,0.02232,0.02209,0.02139,0.02143,0.02428,0.02400,0.02407,0.02596,0.02634,0.02843,0.02701,0.02862,0.03060,0.03189,0.03313,0.03507,0.03687,0.04016,0.04311,0.04637,0.04879,0.05238,0.05693,0.05966,0.06693,0.07134,0.07581,0.08253,0.08928,0.10474,0.11559,0.13362,0.15514,0.17829,0.21062,0.22918,0.14342,0.13016,0.01107,0.00000,0.00000,0.00000,0.00000,0.00000])
            else:
                ratio=np.array([0.008240,0.010067,0.014412,0.017866,0.019956,0.019219,0.022074,0.022874,0.024247,0.025981,0.025087,0.023163,0.025013,0.023496,0.025713,0.025634,0.028251,0.028931,0.028930,0.030955,0.031212,0.030981,0.035395,0.035223,0.035834,0.036878,0.040316,0.044733,0.046461,0.050653,0.054798,0.057018,0.062750,0.067904,0.072841,0.079978,0.083953,0.092812,0.106671,0.119491,0.129240,0.149504,0.179130,0.207500,0.227680,0.142296,0.135143,0.010457,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000 ])
        elif self.year==2019:
            if g==1:
                ratio=np.array([0.007156,0.010183,0.013715,0.016376,0.017800,0.019105,0.021587,0.020809,0.021523,0.023496,0.023225,0.022866,0.022776,0.022729,0.024888,0.025197,0.024833,0.027636,0.028097,0.030063,0.029108,0.030427,0.032784,0.033621,0.035846,0.037151,0.039505,0.042315,0.045473,0.049107,0.051426,0.054678,0.061060,0.063674,0.071288,0.075711,0.080948,0.089158,0.097481,0.114164,0.128157,0.148783,0.177420,0.203026,0.230656,0.151143,0.126128,0.009533,0.000000,0.000000,0.000000,0.000000,0.000000])
            else:
                ratio=np.array([0.01031,0.01118,0.01413,0.01816,0.02096,0.02236,0.02134,0.02440,0.02398,0.02584,0.02650,0.02637,0.02427,0.02630,0.02466,0.02691,0.02697,0.02874,0.02978,0.02991,0.03207,0.03243,0.03262,0.03678,0.03677,0.03733,0.03849,0.04225,0.04717,0.04909,0.05271,0.05722,0.05967,0.06600,0.07163,0.07739,0.08487,0.09016,0.09963,0.11383,0.13058,0.14275,0.16981,0.19987,0.22413,0.14567,0.12598,0.01005,0.00000,0.00000,0.00000,0.00000,0.00000])
        elif self.year==2020:
            if g==1:
                ratio=np.array([0.00685,0.01003,0.01446,0.01794,0.01907,0.01962,0.01975,0.02278,0.02092,0.02225,0.02397,0.02389,0.02380,0.02343,0.02354,0.02630,0.02623,0.02683,0.02899,0.02898,0.03178,0.03043,0.03163,0.03499,0.03561,0.03703,0.03928,0.04109,0.04369,0.04798,0.05089,0.05384,0.05788,0.06378,0.06675,0.07551,0.07984,0.08637,0.09628,0.10459,0.12446,0.14080,0.16941,0.20190,0.22434,0.17349,0.12004,0.00978,0.00000,0.00000,0.00000,0.00000,0.00000])
            else:
                ratio=np.array([0.010314749,0.011183658,0.014133714,0.018155245,0.02095752,0.022361036,0.021342173,0.02440054,0.023979606,0.025840831,0.026502245,0.026371168,0.024266166,0.026298631,0.02465769,0.026913373,0.026965863,0.028742197,0.029784786,0.029912624,0.03206618,0.032433784,0.032615768,0.03678432,0.036767383,0.037333556,0.038492063,0.042250556,0.047171664,0.049090678,0.052714102,0.057218551,0.059674449,0.065998657,0.071631827,0.077391518,0.084869337,0.090156221,0.099630898,0.11382708,0.130583058,0.142753502,0.169805478,0.199871183,0.224134034,0.145669401,0.12597889,0.010053309,0,0,0,0,0])
        elif self.year==2021:
            if g==1:
                ratio=np.array([0.00685,0.01003,0.01446,0.01794,0.01907,0.01962,0.01975,0.02278,0.02092,0.02225,0.02397,0.02389,0.02380,0.02343,0.02354,0.02630,0.02623,0.02683,0.02899,0.02898,0.03178,0.03043,0.03163,0.03499,0.03561,0.03703,0.03928,0.04109,0.04369,0.04798,0.05089,0.05384,0.05788,0.06378,0.06675,0.07551,0.07984,0.08637,0.09628,0.10459,0.12446,0.14080,0.16941,0.20190,0.22434,0.17349,0.12004,0.00978,0.00000,0.00000,0.00000,0.00000,0.00000])
            else:
                ratio=np.array([0.010314749,0.011183658,0.014133714,0.018155245,0.02095752,0.022361036,0.021342173,0.02440054,0.023979606,0.025840831,0.026502245,0.026371168,0.024266166,0.026298631,0.02465769,0.026913373,0.026965863,0.028742197,0.029784786,0.029912624,0.03206618,0.032433784,0.032615768,0.03678432,0.036767383,0.037333556,0.038492063,0.042250556,0.047171664,0.049090678,0.052714102,0.057218551,0.059674449,0.065998657,0.071631827,0.077391518,0.084869337,0.090156221,0.099630898,0.11382708,0.130583058,0.142753502,0.169805478,0.199871183,0.224134034,0.145669401,0.12597889,0.010053309,0,0,0,0,0])
        elif self.year==2022:
            if g==1:
                ratio=np.array([0.00685,0.01003,0.01446,0.01794,0.01907,0.01962,0.01975,0.02278,0.02092,0.02225,0.02397,0.02389,0.02380,0.02343,0.02354,0.02630,0.02623,0.02683,0.02899,0.02898,0.03178,0.03043,0.03163,0.03499,0.03561,0.03703,0.03928,0.04109,0.04369,0.04798,0.05089,0.05384,0.05788,0.06378,0.06675,0.07551,0.07984,0.08637,0.09628,0.10459,0.12446,0.14080,0.16941,0.20190,0.22434,0.17349,0.12004,0.00978,0.00000,0.00000,0.00000,0.00000,0.00000])
            else:
                ratio=np.array([0.010314749,0.011183658,0.014133714,0.018155245,0.02095752,0.022361036,0.021342173,0.02440054,0.023979606,0.025840831,0.026502245,0.026371168,0.024266166,0.026298631,0.02465769,0.026913373,0.026965863,0.028742197,0.029784786,0.029912624,0.03206618,0.032433784,0.032615768,0.03678432,0.036767383,0.037333556,0.038492063,0.042250556,0.047171664,0.049090678,0.052714102,0.057218551,0.059674449,0.065998657,0.071631827,0.077391518,0.084869337,0.090156221,0.099630898,0.11382708,0.130583058,0.142753502,0.169805478,0.199871183,0.224134034,0.145669401,0.12597889,0.010053309,0,0,0,0,0])
        elif self.year==2023:
            if g==1:
                ratio=np.array([0.00685,0.01003,0.01446,0.01794,0.01907,0.01962,0.01975,0.02278,0.02092,0.02225,0.02397,0.02389,0.02380,0.02343,0.02354,0.02630,0.02623,0.02683,0.02899,0.02898,0.03178,0.03043,0.03163,0.03499,0.03561,0.03703,0.03928,0.04109,0.04369,0.04798,0.05089,0.05384,0.05788,0.06378,0.06675,0.07551,0.07984,0.08637,0.09628,0.10459,0.12446,0.14080,0.16941,0.20190,0.22434,0.17349,0.12004,0.00978,0.00000,0.00000,0.00000,0.00000,0.00000])
            else:
                ratio=np.array([0.010314749,0.011183658,0.014133714,0.018155245,0.02095752,0.022361036,0.021342173,0.02440054,0.023979606,0.025840831,0.026502245,0.026371168,0.024266166,0.026298631,0.02465769,0.026913373,0.026965863,0.028742197,0.029784786,0.029912624,0.03206618,0.032433784,0.032615768,0.03678432,0.036767383,0.037333556,0.038492063,0.042250556,0.047171664,0.049090678,0.052714102,0.057218551,0.059674449,0.065998657,0.071631827,0.077391518,0.084869337,0.090156221,0.099630898,0.11382708,0.130583058,0.142753502,0.169805478,0.199871183,0.224134034,0.145669401,0.12597889,0.010053309,0,0,0,0,0])
        elif self.year==2024:
            if g==1:
                ratio=np.array([0.00685,0.01003,0.01446,0.01794,0.01907,0.01962,0.01975,0.02278,0.02092,0.02225,0.02397,0.02389,0.02380,0.02343,0.02354,0.02630,0.02623,0.02683,0.02899,0.02898,0.03178,0.03043,0.03163,0.03499,0.03561,0.03703,0.03928,0.04109,0.04369,0.04798,0.05089,0.05384,0.05788,0.06378,0.06675,0.07551,0.07984,0.08637,0.09628,0.10459,0.12446,0.14080,0.16941,0.20190,0.22434,0.17349,0.12004,0.00978,0.00000,0.00000,0.00000,0.00000,0.00000])
            else:
                ratio=np.array([0.010314749,0.011183658,0.014133714,0.018155245,0.02095752,0.022361036,0.021342173,0.02440054,0.023979606,0.025840831,0.026502245,0.026371168,0.024266166,0.026298631,0.02465769,0.026913373,0.026965863,0.028742197,0.029784786,0.029912624,0.03206618,0.032433784,0.032615768,0.03678432,0.036767383,0.037333556,0.038492063,0.042250556,0.047171664,0.049090678,0.052714102,0.057218551,0.059674449,0.065998657,0.071631827,0.077391518,0.084869337,0.090156221,0.099630898,0.11382708,0.130583058,0.142753502,0.169805478,0.199871183,0.224134034,0.145669401,0.12597889,0.010053309,0,0,0,0,0])
        else: # päivitä
            print('Empstats, unknown year',self.year)
            
        return self.map_ratios(ratio)
        
    def get_gini(self,year):
        if year==2018:
            return 28.1
        elif year==2019:
            return 27.9
        elif year==2020:
            return 27.7
        else:
            return 27.8
            
    def get_kassanjasenyys_rate(self):
        rate_age=np.array([18,30,40,50,60,74])
        #rate_obs=np.array([0.429,0.836,0.917,0.946,0.933,0.933])
        #rate_obs=np.array([0.20,0.836,0.917,0.946,0.933,0.933])
        palkansaajista=np.array([0.20,0.836,0.917,0.933,0.933,0.933])
        yrittajista=np.array([0.121,0.121,0.121,0.121,0.121,0.121])
        suhde=0.104 # yrittäjiä/(yrittäjiä+palkansaajia)
        rate_obs=(1.0-suhde)*palkansaajista+suhde*yrittajista
        #rate_obs=np.array([0.20,0.836,0.917,0.933,0.933,0.933])
        initial_kassanjasenia=rate_obs[0]
        
        x1=self.min_age
        x2=self.max_age
        f = interp1d(rate_age, rate_obs,fill_value='extrapolate')
        n_time = int(np.round((x2-x1)*self.inv_timestep))
        jasenyys_x = np.linspace(x1, x2, num=n_time, endpoint=True)
        rate=f(jasenyys_x)
        
        kassanjasenyys_joinrate=rate*0
        for k in range(0,rate.shape[0]-1):
            kassanjasenyys_joinrate[k+1]=(rate[k+1]-rate[k])/(1-rate[k])
            
        kassanjasenyys_rate=rate
            
        return jasenyys_x,kassanjasenyys_rate
        
    def student_stats(self,g=0):
        '''
        Opiskelijoiden osuus väestöstö
        Lähde: Tilastokeskus
        '''
        if self.year==2018:
            if g==0: # kaikki
                emp_ratio1=np.array([0.608,0.290,0.286,0.291,0.271,0.231,0.183,0.151,0.123,0.100,0.088,0.078,0.068,0.062,0.058,0.054,0.051,0.049,0.043,0.040,0.038,0.032,0.030,0.029,0.027,0.024,0.022,0.021,0.020,0.018,0.017,0.016,0.015,0.012,0.011,0.011,0.010,0.009,0.008,0.006,0.005,0.005,0.003,0.002,0.002,0.002,0.002,0.002,0.002,0.001,0.001,0.001,0.001])
                emp_ratio2=np.array([0.686,0.382,0.331,0.284,0.278,0.255,0.207,0.159,0.122,0.096,0.076,0.062,0.055,0.046,0.037,0.035,0.031,0.028,0.026,0.025,0.023,0.021,0.019,0.019,0.016,0.015,0.014,0.014,0.013,0.013,0.012,0.011,0.010,0.009,0.009,0.007,0.007,0.006,0.007,0.006,0.004,0.004,0.003,0.003,0.002,0.002,0.002,0.002,0.001,0.001,0.001,0.002,0.001])
                emp_ratio=0.5*(emp_ratio1+emp_ratio2)
            elif g==1: # naiset
                emp_ratio=np.array([0.608,0.290,0.286,0.291,0.271,0.231,0.183,0.151,0.123,0.100,0.088,0.078,0.068,0.062,0.058,0.054,0.051,0.049,0.043,0.040,0.038,0.032,0.030,0.029,0.027,0.024,0.022,0.021,0.020,0.018,0.017,0.016,0.015,0.012,0.011,0.011,0.010,0.009,0.008,0.006,0.005,0.005,0.003,0.002,0.002,0.002,0.002,0.002,0.002,0.001,0.001,0.001,0.001])
            else: # miehet
                emp_ratio=np.array([0.686,0.382,0.331,0.284,0.278,0.255,0.207,0.159,0.122,0.096,0.076,0.062,0.055,0.046,0.037,0.035,0.031,0.028,0.026,0.025,0.023,0.021,0.019,0.019,0.016,0.015,0.014,0.014,0.013,0.013,0.012,0.011,0.010,0.009,0.009,0.007,0.007,0.006,0.007,0.006,0.004,0.004,0.003,0.003,0.002,0.002,0.002,0.002,0.001,0.001,0.001,0.002,0.001])
        elif self.year==2019: # 2019
            if g==0: # kaikki
                emp_ratio1=np.array([0.587,0.279,0.287,0.295,0.275,0.239,0.192,0.151,0.122,0.107,0.089,0.080,0.076,0.068,0.065,0.058,0.056,0.053,0.050,0.043,0.042,0.040,0.035,0.033,0.030,0.029,0.025,0.024,0.024,0.021,0.020,0.018,0.016,0.014,0.013,0.012,0.012,0.011,0.009,0.008,0.006,0.005,0.004,0.003,0.002,0.002,0.002,0.002,0.002,0.001,0.002,0.001,0.001])
                emp_ratio2=np.array([0.679,0.360,0.320,0.289,0.283,0.254,0.208,0.160,0.124,0.099,0.077,0.064,0.054,0.049,0.042,0.035,0.034,0.032,0.028,0.024,0.025,0.023,0.023,0.020,0.018,0.017,0.015,0.015,0.014,0.012,0.013,0.012,0.011,0.010,0.010,0.008,0.008,0.007,0.006,0.006,0.005,0.004,0.003,0.002,0.002,0.002,0.002,0.002,0.002,0.001,0.002,0.001,0.001])
                emp_ratio=0.5*(emp_ratio1+emp_ratio2)
            elif g==1: # naiset
                emp_ratio=np.array([0.587,0.279,0.287,0.295,0.275,0.239,0.192,0.151,0.122,0.107,0.089,0.080,0.076,0.068,0.065,0.058,0.056,0.053,0.050,0.043,0.042,0.040,0.035,0.033,0.030,0.029,0.025,0.024,0.024,0.021,0.020,0.018,0.016,0.014,0.013,0.012,0.012,0.011,0.009,0.008,0.006,0.005,0.004,0.003,0.002,0.002,0.002,0.002,0.002,0.001,0.002,0.001,0.001])
            else: # miehet
                emp_ratio=np.array([0.679,0.360,0.320,0.289,0.283,0.254,0.208,0.160,0.124,0.099,0.077,0.064,0.054,0.049,0.042,0.035,0.034,0.032,0.028,0.024,0.025,0.023,0.023,0.020,0.018,0.017,0.015,0.015,0.014,0.012,0.013,0.012,0.011,0.010,0.010,0.008,0.008,0.007,0.006,0.006,0.005,0.004,0.003,0.002,0.002,0.002,0.002,0.002,0.002,0.001,0.002,0.001,0.001])
        elif self.year==2020:
            if g==0: # kaikki
                emp_ratio=np.array([0.697,0.308,0.297,0.321,0.312,0.273,0.220,0.169,0.131,0.105,0.093,0.078,0.069,0.063,0.058,0.052,0.048,0.045,0.042,0.038,0.034,0.033,0.031,0.029,0.026,0.023,0.021,0.019,0.019,0.019,0.016,0.015,0.014,0.013,0.012,0.010,0.010,0.009,0.008,0.007,0.006,0.005,0.003,0.003,0.002,0.001,0.002,0.002,0.002,0.002,0.002,0.002,0.001])
            elif g==1: # naiset
                emp_ratio=np.array([0.67068118,0.32809082,0.32574838,0.33429797,0.31848117,0.27042668,0.21628531,0.16473034,0.12926829,0.10898975,0.10117294,0.08654780,0.07934136,0.07431578,0.06909717,0.06492327,0.05989614,0.05473373,0.05281839,0.04790767,0.04315858,0.04186669,0.03875855,0.03496111,0.03174084,0.02771593,0.02638522,0.02446502,0.02323406,0.02252159,0.01946472,0.01754049,0.01665581,0.01598334,0.01440014,0.01131467,0.01179200,0.01081364,0.00870647,0.00821866,0.00702907,0.00530035,0.00378757,0.00302705,0.00196240,0.00131370,0.00197967,0.00172950,0.00171041,0.00170362,0.00149749,0.00164263,0.00132389])
            else: # miehet
                emp_ratio=np.array([0.72145,0.28863,0.27019,0.30773,0.30658,0.27556,0.22406,0.17352,0.13260,0.10208,0.08631,0.07071,0.05988,0.05146,0.04753,0.04018,0.03596,0.03546,0.03238,0.02876,0.02580,0.02465,0.02433,0.02270,0.01963,0.01766,0.01628,0.01481,0.01494,0.01487,0.01200,0.01313,0.01089,0.01060,0.00983,0.00835,0.00765,0.00724,0.00635,0.00559,0.00447,0.00493,0.00318,0.00236,0.00180,0.00157,0.00205,0.00201,0.00191,0.00149,0.00154,0.00143,0.00125])
        elif self.year==2021: # 2019
            if g==0: # kaikki, päivitä
                emp_ratio1=np.array([0.676,0.340,0.332,0.338,0.322,0.274,0.220,0.167,0.132,0.111,0.103,0.089,0.081,0.076,0.071,0.067,0.062,0.056,0.055,0.049,0.045,0.043,0.040,0.036,0.033,0.029,0.028,0.026,0.024,0.024,0.020,0.018,0.018,0.017,0.015,0.012,0.012,0.011,0.009,0.009,0.007,0.006,0.004,0.003,0.002,0.001,0.002,0.002,0.002,0.002,0.002,0.002,0.001])
                emp_ratio2=np.array([0.729,0.416,0.348,0.323,0.315,0.282,0.229,0.179,0.136,0.105,0.089,0.073,0.061,0.053,0.049,0.041,0.037,0.036,0.033,0.030,0.027,0.025,0.025,0.024,0.020,0.018,0.017,0.015,0.015,0.015,0.013,0.014,0.011,0.011,0.010,0.009,0.008,0.008,0.007,0.006,0.005,0.005,0.003,0.002,0.002,0.002,0.002,0.002,0.002,0.002,0.002,0.001,0.001])
                emp_ratio=0.5*(emp_ratio1+emp_ratio2)
            elif g==1: # naiset
                emp_ratio=np.array([0.676,0.340,0.332,0.338,0.322,0.274,0.220,0.167,0.132,0.111,0.103,0.089,0.081,0.076,0.071,0.067,0.062,0.056,0.055,0.049,0.045,0.043,0.040,0.036,0.033,0.029,0.028,0.026,0.024,0.024,0.020,0.018,0.018,0.017,0.015,0.012,0.012,0.011,0.009,0.009,0.007,0.006,0.004,0.003,0.002,0.001,0.002,0.002,0.002,0.002,0.002,0.002,0.001])
            else: # miehet
                emp_ratio=np.array([0.729,0.416,0.348,0.323,0.315,0.282,0.229,0.179,0.136,0.105,0.089,0.073,0.061,0.053,0.049,0.041,0.037,0.036,0.033,0.030,0.027,0.025,0.025,0.024,0.020,0.018,0.017,0.015,0.015,0.015,0.013,0.014,0.011,0.011,0.010,0.009,0.008,0.008,0.007,0.006,0.005,0.005,0.003,0.002,0.002,0.002,0.002,0.002,0.002,0.002,0.002,0.001,0.001])
        elif self.year==2022: # 2019
            if g==0: # kaikki, päivitä
                emp_ratio1=np.array([0.676,0.340,0.332,0.338,0.322,0.274,0.220,0.167,0.132,0.111,0.103,0.089,0.081,0.076,0.071,0.067,0.062,0.056,0.055,0.049,0.045,0.043,0.040,0.036,0.033,0.029,0.028,0.026,0.024,0.024,0.020,0.018,0.018,0.017,0.015,0.012,0.012,0.011,0.009,0.009,0.007,0.006,0.004,0.003,0.002,0.001,0.002,0.002,0.002,0.002,0.002,0.002,0.001])
                emp_ratio2=np.array([0.729,0.416,0.348,0.323,0.315,0.282,0.229,0.179,0.136,0.105,0.089,0.073,0.061,0.053,0.049,0.041,0.037,0.036,0.033,0.030,0.027,0.025,0.025,0.024,0.020,0.018,0.017,0.015,0.015,0.015,0.013,0.014,0.011,0.011,0.010,0.009,0.008,0.008,0.007,0.006,0.005,0.005,0.003,0.002,0.002,0.002,0.002,0.002,0.002,0.002,0.002,0.001,0.001])
                emp_ratio=0.5*(emp_ratio1+emp_ratio2)
            elif g==1: # naiset
                emp_ratio=np.array([0.676,0.340,0.332,0.338,0.322,0.274,0.220,0.167,0.132,0.111,0.103,0.089,0.081,0.076,0.071,0.067,0.062,0.056,0.055,0.049,0.045,0.043,0.040,0.036,0.033,0.029,0.028,0.026,0.024,0.024,0.020,0.018,0.018,0.017,0.015,0.012,0.012,0.011,0.009,0.009,0.007,0.006,0.004,0.003,0.002,0.001,0.002,0.002,0.002,0.002,0.002,0.002,0.001])
            else: # miehet
                emp_ratio=np.array([0.729,0.416,0.348,0.323,0.315,0.282,0.229,0.179,0.136,0.105,0.089,0.073,0.061,0.053,0.049,0.041,0.037,0.036,0.033,0.030,0.027,0.025,0.025,0.024,0.020,0.018,0.017,0.015,0.015,0.015,0.013,0.014,0.011,0.011,0.010,0.009,0.008,0.008,0.007,0.006,0.005,0.005,0.003,0.002,0.002,0.002,0.002,0.002,0.002,0.002,0.002,0.001,0.001])
        elif self.year==2023: # 2019
            if g==0: # kaikki, päivitä
                emp_ratio1=np.array([0.676,0.340,0.332,0.338,0.322,0.274,0.220,0.167,0.132,0.111,0.103,0.089,0.081,0.076,0.071,0.067,0.062,0.056,0.055,0.049,0.045,0.043,0.040,0.036,0.033,0.029,0.028,0.026,0.024,0.024,0.020,0.018,0.018,0.017,0.015,0.012,0.012,0.011,0.009,0.009,0.007,0.006,0.004,0.003,0.002,0.001,0.002,0.002,0.002,0.002,0.002,0.002,0.001])
                emp_ratio2=np.array([0.729,0.416,0.348,0.323,0.315,0.282,0.229,0.179,0.136,0.105,0.089,0.073,0.061,0.053,0.049,0.041,0.037,0.036,0.033,0.030,0.027,0.025,0.025,0.024,0.020,0.018,0.017,0.015,0.015,0.015,0.013,0.014,0.011,0.011,0.010,0.009,0.008,0.008,0.007,0.006,0.005,0.005,0.003,0.002,0.002,0.002,0.002,0.002,0.002,0.002,0.002,0.001,0.001])
                emp_ratio=0.5*(emp_ratio1+emp_ratio2)
            elif g==1: # naiset
                emp_ratio=np.array([0.676,0.340,0.332,0.338,0.322,0.274,0.220,0.167,0.132,0.111,0.103,0.089,0.081,0.076,0.071,0.067,0.062,0.056,0.055,0.049,0.045,0.043,0.040,0.036,0.033,0.029,0.028,0.026,0.024,0.024,0.020,0.018,0.018,0.017,0.015,0.012,0.012,0.011,0.009,0.009,0.007,0.006,0.004,0.003,0.002,0.001,0.002,0.002,0.002,0.002,0.002,0.002,0.001])
            else: # miehet
                emp_ratio=np.array([0.729,0.416,0.348,0.323,0.315,0.282,0.229,0.179,0.136,0.105,0.089,0.073,0.061,0.053,0.049,0.041,0.037,0.036,0.033,0.030,0.027,0.025,0.025,0.024,0.020,0.018,0.017,0.015,0.015,0.015,0.013,0.014,0.011,0.011,0.010,0.009,0.008,0.008,0.007,0.006,0.005,0.005,0.003,0.002,0.002,0.002,0.002,0.002,0.002,0.002,0.002,0.001,0.001])
        elif self.year==2024: # 2019
            if g==0: # kaikki, päivitä
                emp_ratio1=np.array([0.676,0.340,0.332,0.338,0.322,0.274,0.220,0.167,0.132,0.111,0.103,0.089,0.081,0.076,0.071,0.067,0.062,0.056,0.055,0.049,0.045,0.043,0.040,0.036,0.033,0.029,0.028,0.026,0.024,0.024,0.020,0.018,0.018,0.017,0.015,0.012,0.012,0.011,0.009,0.009,0.007,0.006,0.004,0.003,0.002,0.001,0.002,0.002,0.002,0.002,0.002,0.002,0.001])
                emp_ratio2=np.array([0.729,0.416,0.348,0.323,0.315,0.282,0.229,0.179,0.136,0.105,0.089,0.073,0.061,0.053,0.049,0.041,0.037,0.036,0.033,0.030,0.027,0.025,0.025,0.024,0.020,0.018,0.017,0.015,0.015,0.015,0.013,0.014,0.011,0.011,0.010,0.009,0.008,0.008,0.007,0.006,0.005,0.005,0.003,0.002,0.002,0.002,0.002,0.002,0.002,0.002,0.002,0.001,0.001])
                emp_ratio=0.5*(emp_ratio1+emp_ratio2)
            elif g==1: # naiset
                emp_ratio=np.array([0.676,0.340,0.332,0.338,0.322,0.274,0.220,0.167,0.132,0.111,0.103,0.089,0.081,0.076,0.071,0.067,0.062,0.056,0.055,0.049,0.045,0.043,0.040,0.036,0.033,0.029,0.028,0.026,0.024,0.024,0.020,0.018,0.018,0.017,0.015,0.012,0.012,0.011,0.009,0.009,0.007,0.006,0.004,0.003,0.002,0.001,0.002,0.002,0.002,0.002,0.002,0.002,0.001])
            else: # miehet
                emp_ratio=np.array([0.729,0.416,0.348,0.323,0.315,0.282,0.229,0.179,0.136,0.105,0.089,0.073,0.061,0.053,0.049,0.041,0.037,0.036,0.033,0.030,0.027,0.025,0.025,0.024,0.020,0.018,0.017,0.015,0.015,0.015,0.013,0.014,0.011,0.011,0.010,0.009,0.008,0.008,0.007,0.006,0.005,0.005,0.003,0.002,0.002,0.002,0.002,0.002,0.002,0.002,0.002,0.001,0.001])
        else:
            print('Empstats, unknown year',self.year)

        return self.map_ratios(emp_ratio) #+self.army_stats(g=g)
        
    def army_stats(self,g=0):
        '''
        Armeijassa olevien osuus väestöstö
        
        Vanha data, not in use
        
        Lähde: Tilastokeskus
        '''
        if self.year==2018:
            if g==0: # kaikki
                emp_ratio=np.array([0.000,0.112,0.089,0.015,0.006,0.004,0.002,0.002,0.001,0.001,0.001,0.001,0.000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
            elif g==1: # naiset
                emp_ratio=np.array([0.00014,0.00771,0.00362,0.00179,0.001,0.001,0.000,0.000,0.000,0.000,0.000,0.000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
            else: # miehet
                emp_ratio=np.array([0.000,0.112,0.089,0.015,0.006,0.004,0.002,0.002,0.001,0.001,0.001,0.001,0.000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
        elif self.year==2019: # 2019, päivitä
            if g==0: # kaikki
                emp_ratio=np.array([0.000,0.060,0.040,0.006,0.003,0.001,0.001,0.001,0.001,0.001,0.000,0.000,0.000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
            elif g==1: # naiset
                emp_ratio=np.array([0.00007,0.00827,0.00396,0.00159,0.001,0.001,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
            else: # miehet
                emp_ratio=np.array([0.000,0.112,0.089,0.015,0.006,0.004,0.002,0.002,0.001,0.001,0.001,0.001,0.000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
        elif self.year==2020: # 2019, päivitä
            if g==0: # kaikk
                emp_ratio=np.array([0.000,0.060,0.040,0.006,0.003,0.001,0.001,0.001,0.001,0.001,0.000,0.000,0.000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
            elif g==1: # naiset
                emp_ratio=np.array([0.00007,0.00827,0.00396,0.00159,0.001,0.001,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
            else: # miehet
                emp_ratio=np.array([0.000,0.112,0.089,0.015,0.006,0.004,0.002,0.002,0.001,0.001,0.001,0.001,0.000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
        elif self.year==2021: # 2019, päivitä
            if g==0: # kaikki
                emp_ratio=np.array([0.000,0.060,0.040,0.006,0.003,0.001,0.001,0.001,0.001,0.001,0.000,0.000,0.000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
            elif g==1: # naiset
                emp_ratio=np.array([0.00007,0.00827,0.00396,0.00159,0.001,0.001,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
            else: # miehet
                emp_ratio=np.array([0.000,0.112,0.089,0.015,0.006,0.004,0.002,0.002,0.001,0.001,0.001,0.001,0.000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
        elif self.year==2022: # 2019, päivitä
            if g==0: # kaikki
                emp_ratio=np.array([0.000,0.060,0.040,0.006,0.003,0.001,0.001,0.001,0.001,0.001,0.000,0.000,0.000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
            elif g==1: # naiset
                emp_ratio=np.array([0.00007,0.00827,0.00396,0.00159,0.001,0.001,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
            else: # miehet
                emp_ratio=np.array([0.000,0.112,0.089,0.015,0.006,0.004,0.002,0.002,0.001,0.001,0.001,0.001,0.000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
        elif self.year==2023: # 2019, päivitä
            if g==0: # kaikki
                emp_ratio=np.array([0.000,0.060,0.040,0.006,0.003,0.001,0.001,0.001,0.001,0.001,0.000,0.000,0.000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
            elif g==1: # naiset
                emp_ratio=np.array([0.00007,0.00827,0.00396,0.00159,0.001,0.001,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
            else: # miehet
                emp_ratio=np.array([0.000,0.112,0.089,0.015,0.006,0.004,0.002,0.002,0.001,0.001,0.001,0.001,0.000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
        elif self.year==2024: # 2019, päivitä
            if g==0: # kaikki
                emp_ratio=np.array([0.000,0.060,0.040,0.006,0.003,0.001,0.001,0.001,0.001,0.001,0.000,0.000,0.000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
            elif g==1: # naiset
                emp_ratio=np.array([0.00007,0.00827,0.00396,0.00159,0.001,0.001,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
            else: # miehet
                emp_ratio=np.array([0.000,0.112,0.089,0.015,0.006,0.004,0.002,0.002,0.001,0.001,0.001,0.001,0.000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
        else:
            print('Empstats, unknown year',self.year)

        return self.map_ratios(emp_ratio)
        
    def outsider_stats(self,g=0):
        '''
        Työelämän ulkopuolella olevien osuus väestöstö
        Lähde: Tilastokeskus
        '''
        if self.year==2018:
            if g==0: # kaikki
                emp_ratio=np.array([0.027,0.097,0.111,0.067,0.063,0.063,0.063,0.066,0.071,0.072,0.075,0.076,0.076,0.076,0.073,0.071,0.069,0.064,0.061,0.059,0.058,0.054,0.051,0.045,0.044,0.043,0.042,0.042,0.041,0.039,0.039,0.040,0.039,0.039,0.038,0.039,0.039,0.040,0.041,0.041,0.040,0.040,0.038,0.036,0.033,0.017,0.009,0.006,0.004,0.004,0.003,0.004,0.004])
            elif g==1: # naiset
                emp_ratio=np.array([0.025,0.089,0.074,0.064,0.066,0.070,0.072,0.079,0.087,0.090,0.096,0.097,0.098,0.096,0.095,0.090,0.085,0.079,0.072,0.071,0.068,0.061,0.057,0.049,0.045,0.045,0.042,0.041,0.040,0.037,0.038,0.038,0.037,0.035,0.036,0.035,0.037,0.038,0.038,0.038,0.038,0.038,0.038,0.036,0.034,0.019,0.010,0.006,0.004,0.004,0.003,0.004,0.004])
            else: # miehet
                emp_ratio=np.array([0.029,0.104,0.146,0.071,0.060,0.057,0.055,0.055,0.055,0.055,0.055,0.056,0.056,0.057,0.053,0.054,0.054,0.049,0.050,0.048,0.049,0.047,0.046,0.042,0.043,0.042,0.043,0.042,0.042,0.042,0.039,0.042,0.040,0.043,0.041,0.043,0.040,0.042,0.043,0.044,0.042,0.041,0.038,0.037,0.031,0.016,0.007,0.005,0.004,0.004,0.003,0.003,0.003])
        elif self.year==2019:
            if g==0: # kaikki
                emp_ratio=np.array([0.028,0.096,0.111,0.068,0.062,0.065,0.065,0.066,0.070,0.075,0.075,0.079,0.079,0.079,0.079,0.075,0.074,0.070,0.068,0.063,0.060,0.058,0.054,0.051,0.046,0.044,0.044,0.043,0.043,0.042,0.041,0.040,0.040,0.041,0.039,0.040,0.043,0.042,0.042,0.043,0.042,0.042,0.041,0.046,0.050,0.032,0.011,0.007,0.004,0.004,0.004,0.004,0.004])
            elif g==1: # naiset
                emp_ratio=np.array([0.02661,0.08591,0.07117,0.06150,0.06072,0.06847,0.07220,0.07536,0.08222,0.09015,0.09261,0.09910,0.10146,0.10027,0.10110,0.09631,0.09245,0.08605,0.08335,0.07482,0.07137,0.06615,0.05958,0.05495,0.04856,0.04379,0.04300,0.04160,0.04084,0.03996,0.03789,0.03780,0.03734,0.03788,0.03662,0.03637,0.03986,0.04084,0.03892,0.04096,0.04073,0.04020,0.04142,0.04485,0.04817,0.03198,0.01147,0.00704,0.00382,0.00416,0.00370,0.00372,0.00409])
            else: # miehet
                emp_ratio=np.array([0.030,0.106,0.148,0.074,0.063,0.061,0.058,0.058,0.058,0.060,0.058,0.060,0.057,0.058,0.059,0.055,0.057,0.055,0.053,0.053,0.050,0.050,0.049,0.047,0.043,0.043,0.045,0.044,0.045,0.045,0.043,0.042,0.044,0.044,0.041,0.043,0.046,0.043,0.045,0.045,0.044,0.044,0.041,0.047,0.052,0.031,0.010,0.006,0.004,0.004,0.005,0.004,0.004])
        elif self.year==2020:
            if g==0: # kaikki, päivitä
                emp_ratio=np.array([0.027,0.093,0.101,0.066,0.060,0.060,0.063,0.064,0.067,0.068,0.072,0.073,0.072,0.072,0.073,0.072,0.067,0.067,0.064,0.060,0.056,0.052,0.050,0.046,0.043,0.040,0.038,0.038,0.038,0.037,0.036,0.035,0.037,0.036,0.036,0.035,0.036,0.037,0.038,0.038,0.038,0.036,0.035,0.034,0.036,0.034,0.010,0.007,0.004,0.003,0.004,0.003,0.003])
            elif g==1: # naiset
                emp_ratio=np.array([0.0229635,0.082,0.070,0.063,0.060,0.063,0.070,0.074,0.080,0.083,0.087,0.092,0.093,0.092,0.095,0.093,0.087,0.084,0.078,0.073,0.065,0.060,0.056,0.051,0.046,0.040,0.037,0.036,0.034,0.034,0.033,0.032,0.033,0.033,0.033,0.031,0.033,0.034,0.036,0.036,0.035,0.034,0.035,0.034,0.037,0.035,0.011,0.006,0.004,0.003,0.004,0.003,0.003])
            else: # miehet
                emp_ratio=np.array([0.031,0.103,0.129,0.068,0.060,0.058,0.057,0.054,0.054,0.055,0.057,0.056,0.053,0.053,0.052,0.053,0.049,0.051,0.051,0.047,0.047,0.044,0.045,0.042,0.040,0.039,0.038,0.041,0.041,0.039,0.038,0.038,0.040,0.039,0.038,0.038,0.038,0.040,0.039,0.040,0.040,0.037,0.036,0.034,0.036,0.033,0.009,0.007,0.003,0.003,0.004,0.004,0.003])
        elif self.year==2021: # 2019, päivitä
            if g==0: # kaikki, päivitä
                emp_ratio=np.array([0.027,0.093,0.101,0.066,0.060,0.060,0.063,0.064,0.067,0.068,0.072,0.073,0.072,0.072,0.073,0.072,0.067,0.067,0.064,0.060,0.056,0.052,0.050,0.046,0.043,0.040,0.038,0.038,0.038,0.037,0.036,0.035,0.037,0.036,0.036,0.035,0.036,0.037,0.038,0.038,0.038,0.036,0.035,0.034,0.036,0.034,0.010,0.007,0.004,0.003,0.004,0.003,0.003])
            elif g==1: # naiset
                emp_ratio=np.array([0.0229635,0.082,0.070,0.063,0.060,0.063,0.070,0.074,0.080,0.083,0.087,0.092,0.093,0.092,0.095,0.093,0.087,0.084,0.078,0.073,0.065,0.060,0.056,0.051,0.046,0.040,0.037,0.036,0.034,0.034,0.033,0.032,0.033,0.033,0.033,0.031,0.033,0.034,0.036,0.036,0.035,0.034,0.035,0.034,0.037,0.035,0.011,0.006,0.004,0.003,0.004,0.003,0.003])
            else: # miehet
                emp_ratio=np.array([0.031,0.103,0.129,0.068,0.060,0.058,0.057,0.054,0.054,0.055,0.057,0.056,0.053,0.053,0.052,0.053,0.049,0.051,0.051,0.047,0.047,0.044,0.045,0.042,0.040,0.039,0.038,0.041,0.041,0.039,0.038,0.038,0.040,0.039,0.038,0.038,0.038,0.040,0.039,0.040,0.040,0.037,0.036,0.034,0.036,0.033,0.009,0.007,0.003,0.003,0.004,0.004,0.003])
        elif self.year==2022: # 2019, päivitä
            if g==0: # kaikki, päivitä
                emp_ratio=np.array([0.027,0.093,0.101,0.066,0.060,0.060,0.063,0.064,0.067,0.068,0.072,0.073,0.072,0.072,0.073,0.072,0.067,0.067,0.064,0.060,0.056,0.052,0.050,0.046,0.043,0.040,0.038,0.038,0.038,0.037,0.036,0.035,0.037,0.036,0.036,0.035,0.036,0.037,0.038,0.038,0.038,0.036,0.035,0.034,0.036,0.034,0.010,0.007,0.004,0.003,0.004,0.003,0.003])
            elif g==1: # naiset
                emp_ratio=np.array([0.0229635,0.082,0.070,0.063,0.060,0.063,0.070,0.074,0.080,0.083,0.087,0.092,0.093,0.092,0.095,0.093,0.087,0.084,0.078,0.073,0.065,0.060,0.056,0.051,0.046,0.040,0.037,0.036,0.034,0.034,0.033,0.032,0.033,0.033,0.033,0.031,0.033,0.034,0.036,0.036,0.035,0.034,0.035,0.034,0.037,0.035,0.011,0.006,0.004,0.003,0.004,0.003,0.003])
            else: # miehet
                emp_ratio=np.array([0.031,0.103,0.129,0.068,0.060,0.058,0.057,0.054,0.054,0.055,0.057,0.056,0.053,0.053,0.052,0.053,0.049,0.051,0.051,0.047,0.047,0.044,0.045,0.042,0.040,0.039,0.038,0.041,0.041,0.039,0.038,0.038,0.040,0.039,0.038,0.038,0.038,0.040,0.039,0.040,0.040,0.037,0.036,0.034,0.036,0.033,0.009,0.007,0.003,0.003,0.004,0.004,0.003])
        elif self.year==2023: # 2019, päivitä
            if g==0: # kaikki, päivitä
                emp_ratio=np.array([0.027,0.093,0.101,0.066,0.060,0.060,0.063,0.064,0.067,0.068,0.072,0.073,0.072,0.072,0.073,0.072,0.067,0.067,0.064,0.060,0.056,0.052,0.050,0.046,0.043,0.040,0.038,0.038,0.038,0.037,0.036,0.035,0.037,0.036,0.036,0.035,0.036,0.037,0.038,0.038,0.038,0.036,0.035,0.034,0.036,0.034,0.010,0.007,0.004,0.003,0.004,0.003,0.003])
            elif g==1: # naiset
                emp_ratio=np.array([0.0229635,0.082,0.070,0.063,0.060,0.063,0.070,0.074,0.080,0.083,0.087,0.092,0.093,0.092,0.095,0.093,0.087,0.084,0.078,0.073,0.065,0.060,0.056,0.051,0.046,0.040,0.037,0.036,0.034,0.034,0.033,0.032,0.033,0.033,0.033,0.031,0.033,0.034,0.036,0.036,0.035,0.034,0.035,0.034,0.037,0.035,0.011,0.006,0.004,0.003,0.004,0.003,0.003])
            else: # miehet
                emp_ratio=np.array([0.031,0.103,0.129,0.068,0.060,0.058,0.057,0.054,0.054,0.055,0.057,0.056,0.053,0.053,0.052,0.053,0.049,0.051,0.051,0.047,0.047,0.044,0.045,0.042,0.040,0.039,0.038,0.041,0.041,0.039,0.038,0.038,0.040,0.039,0.038,0.038,0.038,0.040,0.039,0.040,0.040,0.037,0.036,0.034,0.036,0.033,0.009,0.007,0.003,0.003,0.004,0.004,0.003])
        elif self.year==2024: # 2019, päivitä
            if g==0: # kaikki, päivitä
                emp_ratio=np.array([0.027,0.093,0.101,0.066,0.060,0.060,0.063,0.064,0.067,0.068,0.072,0.073,0.072,0.072,0.073,0.072,0.067,0.067,0.064,0.060,0.056,0.052,0.050,0.046,0.043,0.040,0.038,0.038,0.038,0.037,0.036,0.035,0.037,0.036,0.036,0.035,0.036,0.037,0.038,0.038,0.038,0.036,0.035,0.034,0.036,0.034,0.010,0.007,0.004,0.003,0.004,0.003,0.003])
            elif g==1: # naiset
                emp_ratio=np.array([0.0229635,0.082,0.070,0.063,0.060,0.063,0.070,0.074,0.080,0.083,0.087,0.092,0.093,0.092,0.095,0.093,0.087,0.084,0.078,0.073,0.065,0.060,0.056,0.051,0.046,0.040,0.037,0.036,0.034,0.034,0.033,0.032,0.033,0.033,0.033,0.031,0.033,0.034,0.036,0.036,0.035,0.034,0.035,0.034,0.037,0.035,0.011,0.006,0.004,0.003,0.004,0.003,0.003])
            else: # miehet
                emp_ratio=np.array([0.031,0.103,0.129,0.068,0.060,0.058,0.057,0.054,0.054,0.055,0.057,0.056,0.053,0.053,0.052,0.053,0.049,0.051,0.051,0.047,0.047,0.044,0.045,0.042,0.040,0.039,0.038,0.041,0.041,0.039,0.038,0.038,0.040,0.039,0.038,0.038,0.038,0.040,0.039,0.040,0.040,0.037,0.036,0.034,0.036,0.033,0.009,0.007,0.003,0.003,0.004,0.004,0.003])
        else:
            print('Empstats, unknown year',self.year)

        return self.map_ratios(emp_ratio)
        
    def tyotjakso_stats(self):
        '''
        Päättyneiden työttömyysjaksojen jakauma
        '''
        d=[]
        
    def pensioner_stats(self,g=0):
        '''
        Eläkkeellä olevien osuus väestöstö
        Lähde: Tilastokeskus
        '''
        if self.year==2018:
            if g==0: # kaikki
                emp_ratio=np.array([ 0.011,0.014,0.016,0.016,0.018,0.019,0.019,0.021,0.020,0.019,0.020,0.021,0.022,0.022,0.024,0.024,0.025,0.025,0.026,0.026,0.029,0.029,0.030,0.031,0.034,0.037,0.039,0.042,0.045,0.047,0.052,0.056,0.060,0.065,0.070,0.076,0.088,0.098,0.110,0.128,0.159,0.196,0.277,0.533,0.741,0.849,0.888,0.908,0.983,0.992,0.993 ])
            elif g==1: # naiset
                emp_ratio=np.array([ 0.010,0.013,0.014,0.016,0.016,0.017,0.018,0.018,0.018,0.018,0.017,0.020,0.020,0.020,0.022,0.021,0.023,0.022,0.023,0.024,0.025,0.026,0.027,0.029,0.031,0.034,0.036,0.038,0.041,0.044,0.047,0.052,0.055,0.058,0.062,0.066,0.077,0.085,0.097,0.111,0.142,0.177,0.258,0.518,0.735,0.855,0.896,0.916,0.983,0.991,0.992 ])
            else: # miehet
                emp_ratio=np.array([ 0.012,0.016,0.018,0.017,0.019,0.020,0.021,0.023,0.022,0.021,0.022,0.021,0.024,0.024,0.026,0.026,0.026,0.028,0.028,0.027,0.032,0.032,0.033,0.033,0.036,0.041,0.042,0.045,0.049,0.051,0.056,0.060,0.065,0.072,0.078,0.086,0.099,0.112,0.123,0.144,0.178,0.216,0.297,0.549,0.748,0.843,0.880,0.901,0.982,0.993,0.993 ])
        elif self.year==2019: # 2019, päivitä
            if g==0: # kaikki
                emp_ratio=np.array([ 0.011,0.014,0.016,0.016,0.018,0.019,0.019,0.021,0.020,0.019,0.020,0.021,0.022,0.022,0.024,0.024,0.025,0.025,0.026,0.026,0.029,0.029,0.030,0.031,0.034,0.037,0.039,0.042,0.045,0.047,0.052,0.056,0.060,0.065,0.070,0.076,0.088,0.098,0.110,0.128,0.159,0.196,0.277,0.533,0.741,0.849,0.888,0.908,0.983,0.992,0.993 ])
            elif g==1: # naiset
                emp_ratio=np.array([ 0.010,0.013,0.014,0.016,0.016,0.017,0.018,0.018,0.018,0.018,0.017,0.020,0.020,0.020,0.022,0.021,0.023,0.022,0.023,0.024,0.025,0.026,0.027,0.029,0.031,0.034,0.036,0.038,0.041,0.044,0.047,0.052,0.055,0.058,0.062,0.066,0.077,0.085,0.097,0.111,0.142,0.177,0.258,0.518,0.735,0.855,0.896,0.916,0.983,0.991,0.992 ])
            else: # miehet
                emp_ratio=np.array([ 0.012,0.016,0.018,0.017,0.019,0.020,0.021,0.023,0.022,0.021,0.022,0.021,0.024,0.024,0.026,0.026,0.026,0.028,0.028,0.027,0.032,0.032,0.033,0.033,0.036,0.041,0.042,0.045,0.049,0.051,0.056,0.060,0.065,0.072,0.078,0.086,0.099,0.112,0.123,0.144,0.178,0.216,0.297,0.549,0.748,0.843,0.880,0.901,0.982,0.993,0.993 ])
        elif self.year==2020: # 2019, päivitä
            if g==0: # kaikki
                emp_ratio=np.array([ 0.011,0.014,0.016,0.016,0.018,0.019,0.019,0.021,0.020,0.019,0.020,0.021,0.022,0.022,0.024,0.024,0.025,0.025,0.026,0.026,0.029,0.029,0.030,0.031,0.034,0.037,0.039,0.042,0.045,0.047,0.052,0.056,0.060,0.065,0.070,0.076,0.088,0.098,0.110,0.128,0.159,0.196,0.277,0.533,0.741,0.849,0.888,0.908,0.983,0.992,0.993 ])
            elif g==1: # naiset
                emp_ratio=np.array([ 0.010,0.013,0.014,0.016,0.016,0.017,0.018,0.018,0.018,0.018,0.017,0.020,0.020,0.020,0.022,0.021,0.023,0.022,0.023,0.024,0.025,0.026,0.027,0.029,0.031,0.034,0.036,0.038,0.041,0.044,0.047,0.052,0.055,0.058,0.062,0.066,0.077,0.085,0.097,0.111,0.142,0.177,0.258,0.518,0.735,0.855,0.896,0.916,0.983,0.991,0.992 ])
            else: # miehet
                emp_ratio=np.array([ 0.012,0.016,0.018,0.017,0.019,0.020,0.021,0.023,0.022,0.021,0.022,0.021,0.024,0.024,0.026,0.026,0.026,0.028,0.028,0.027,0.032,0.032,0.033,0.033,0.036,0.041,0.042,0.045,0.049,0.051,0.056,0.060,0.065,0.072,0.078,0.086,0.099,0.112,0.123,0.144,0.178,0.216,0.297,0.549,0.748,0.843,0.880,0.901,0.982,0.993,0.993 ])
        elif self.year==2021: # 2019, päivitä
            if g==0: # kaikki
                emp_ratio=np.array([ 0.011,0.014,0.016,0.016,0.018,0.019,0.019,0.021,0.020,0.019,0.020,0.021,0.022,0.022,0.024,0.024,0.025,0.025,0.026,0.026,0.029,0.029,0.030,0.031,0.034,0.037,0.039,0.042,0.045,0.047,0.052,0.056,0.060,0.065,0.070,0.076,0.088,0.098,0.110,0.128,0.159,0.196,0.277,0.533,0.741,0.849,0.888,0.908,0.983,0.992,0.993 ])
            elif g==1: # naiset
                emp_ratio=np.array([ 0.010,0.013,0.014,0.016,0.016,0.017,0.018,0.018,0.018,0.018,0.017,0.020,0.020,0.020,0.022,0.021,0.023,0.022,0.023,0.024,0.025,0.026,0.027,0.029,0.031,0.034,0.036,0.038,0.041,0.044,0.047,0.052,0.055,0.058,0.062,0.066,0.077,0.085,0.097,0.111,0.142,0.177,0.258,0.518,0.735,0.855,0.896,0.916,0.983,0.991,0.992 ])
            else: # miehet
                emp_ratio=np.array([ 0.012,0.016,0.018,0.017,0.019,0.020,0.021,0.023,0.022,0.021,0.022,0.021,0.024,0.024,0.026,0.026,0.026,0.028,0.028,0.027,0.032,0.032,0.033,0.033,0.036,0.041,0.042,0.045,0.049,0.051,0.056,0.060,0.065,0.072,0.078,0.086,0.099,0.112,0.123,0.144,0.178,0.216,0.297,0.549,0.748,0.843,0.880,0.901,0.982,0.993,0.993 ])
        elif self.year==2022: # 2019, päivitä
            if g==0: # kaikki
                emp_ratio=np.array([ 0.011,0.014,0.016,0.016,0.018,0.019,0.019,0.021,0.020,0.019,0.020,0.021,0.022,0.022,0.024,0.024,0.025,0.025,0.026,0.026,0.029,0.029,0.030,0.031,0.034,0.037,0.039,0.042,0.045,0.047,0.052,0.056,0.060,0.065,0.070,0.076,0.088,0.098,0.110,0.128,0.159,0.196,0.277,0.533,0.741,0.849,0.888,0.908,0.983,0.992,0.993 ])
            elif g==1: # naiset
                emp_ratio=np.array([ 0.010,0.013,0.014,0.016,0.016,0.017,0.018,0.018,0.018,0.018,0.017,0.020,0.020,0.020,0.022,0.021,0.023,0.022,0.023,0.024,0.025,0.026,0.027,0.029,0.031,0.034,0.036,0.038,0.041,0.044,0.047,0.052,0.055,0.058,0.062,0.066,0.077,0.085,0.097,0.111,0.142,0.177,0.258,0.518,0.735,0.855,0.896,0.916,0.983,0.991,0.992 ])
            else: # miehet
                emp_ratio=np.array([ 0.012,0.016,0.018,0.017,0.019,0.020,0.021,0.023,0.022,0.021,0.022,0.021,0.024,0.024,0.026,0.026,0.026,0.028,0.028,0.027,0.032,0.032,0.033,0.033,0.036,0.041,0.042,0.045,0.049,0.051,0.056,0.060,0.065,0.072,0.078,0.086,0.099,0.112,0.123,0.144,0.178,0.216,0.297,0.549,0.748,0.843,0.880,0.901,0.982,0.993,0.993 ])
        elif self.year==2023: # 2019, päivitä
            if g==0: # kaikki
                emp_ratio=np.array([ 0.011,0.014,0.016,0.016,0.018,0.019,0.019,0.021,0.020,0.019,0.020,0.021,0.022,0.022,0.024,0.024,0.025,0.025,0.026,0.026,0.029,0.029,0.030,0.031,0.034,0.037,0.039,0.042,0.045,0.047,0.052,0.056,0.060,0.065,0.070,0.076,0.088,0.098,0.110,0.128,0.159,0.196,0.277,0.533,0.741,0.849,0.888,0.908,0.983,0.992,0.993 ])
            elif g==1: # naiset
                emp_ratio=np.array([ 0.010,0.013,0.014,0.016,0.016,0.017,0.018,0.018,0.018,0.018,0.017,0.020,0.020,0.020,0.022,0.021,0.023,0.022,0.023,0.024,0.025,0.026,0.027,0.029,0.031,0.034,0.036,0.038,0.041,0.044,0.047,0.052,0.055,0.058,0.062,0.066,0.077,0.085,0.097,0.111,0.142,0.177,0.258,0.518,0.735,0.855,0.896,0.916,0.983,0.991,0.992 ])
            else: # miehet
                emp_ratio=np.array([ 0.012,0.016,0.018,0.017,0.019,0.020,0.021,0.023,0.022,0.021,0.022,0.021,0.024,0.024,0.026,0.026,0.026,0.028,0.028,0.027,0.032,0.032,0.033,0.033,0.036,0.041,0.042,0.045,0.049,0.051,0.056,0.060,0.065,0.072,0.078,0.086,0.099,0.112,0.123,0.144,0.178,0.216,0.297,0.549,0.748,0.843,0.880,0.901,0.982,0.993,0.993 ])
        elif self.year==2024: # 2019, päivitä
            if g==0: # kaikki
                emp_ratio=np.array([ 0.011,0.014,0.016,0.016,0.018,0.019,0.019,0.021,0.020,0.019,0.020,0.021,0.022,0.022,0.024,0.024,0.025,0.025,0.026,0.026,0.029,0.029,0.030,0.031,0.034,0.037,0.039,0.042,0.045,0.047,0.052,0.056,0.060,0.065,0.070,0.076,0.088,0.098,0.110,0.128,0.159,0.196,0.277,0.533,0.741,0.849,0.888,0.908,0.983,0.992,0.993 ])
            elif g==1: # naiset
                emp_ratio=np.array([ 0.010,0.013,0.014,0.016,0.016,0.017,0.018,0.018,0.018,0.018,0.017,0.020,0.020,0.020,0.022,0.021,0.023,0.022,0.023,0.024,0.025,0.026,0.027,0.029,0.031,0.034,0.036,0.038,0.041,0.044,0.047,0.052,0.055,0.058,0.062,0.066,0.077,0.085,0.097,0.111,0.142,0.177,0.258,0.518,0.735,0.855,0.896,0.916,0.983,0.991,0.992 ])
            else: # miehet
                emp_ratio=np.array([ 0.012,0.016,0.018,0.017,0.019,0.020,0.021,0.023,0.022,0.021,0.022,0.021,0.024,0.024,0.026,0.026,0.026,0.028,0.028,0.027,0.032,0.032,0.033,0.033,0.036,0.041,0.042,0.045,0.049,0.051,0.056,0.060,0.065,0.072,0.078,0.086,0.099,0.112,0.123,0.144,0.178,0.216,0.297,0.549,0.748,0.843,0.880,0.901,0.982,0.993,0.993 ])
        else:
            print('Empstats, unknown year',self.year)

        return self.map_ratios(emp_ratio)
        
    def workforce_stats(self,g=0):
        '''
        Työvoimassa olevat ilman vanhempainvapailla olevia
        Lähde: Tilastokeskus
        päivitä
        '''
        if self.year==2018:
            if g==0: # miehet
                emp_ratio=np.array([0.276,0.503,0.508,0.627,0.642,0.666,0.714,0.761,0.795,0.819,0.840,0.852,0.858,0.866,0.877,0.878,0.879,0.889,0.892,0.893,0.895,0.901,0.900,0.905,0.906,0.909,0.906,0.902,0.903,0.900,0.899,0.896,0.893,0.887,0.885,0.877,0.873,0.864,0.850,0.837,0.826,0.809,0.775,0.741,0.663,0.428,0.242,0.149,0.116,0.095,0.012,0.002,0.002])
            elif g==1: # naiset
                emp_ratio=np.array([0.360,0.612,0.625,0.626,0.641,0.672,0.718,0.740,0.755,0.773,0.780,0.784,0.794,0.799,0.802,0.814,0.820,0.831,0.845,0.853,0.859,0.872,0.880,0.891,0.897,0.900,0.903,0.903,0.903,0.906,0.904,0.901,0.900,0.901,0.898,0.896,0.890,0.887,0.875,0.870,0.858,0.844,0.812,0.781,0.701,0.458,0.253,0.137,0.100,0.082,0.012,0.004,0.003])
            else: # miehet
                emp_ratio1=np.array([0.360,0.612,0.625,0.626,0.641,0.672,0.718,0.740,0.755,0.773,0.780,0.784,0.794,0.799,0.802,0.814,0.820,0.831,0.845,0.853,0.859,0.872,0.880,0.891,0.897,0.900,0.903,0.903,0.903,0.906,0.904,0.901,0.900,0.901,0.898,0.896,0.890,0.887,0.875,0.870,0.858,0.844,0.812,0.781,0.701,0.458,0.253,0.137,0.100,0.082,0.012,0.004,0.003])
                emp_ratio2=np.array([0.276,0.503,0.508,0.627,0.642,0.666,0.714,0.761,0.795,0.819,0.840,0.852,0.858,0.866,0.877,0.878,0.879,0.889,0.892,0.893,0.895,0.901,0.900,0.905,0.906,0.909,0.906,0.902,0.903,0.900,0.899,0.896,0.893,0.887,0.885,0.877,0.873,0.864,0.850,0.837,0.826,0.809,0.775,0.741,0.663,0.428,0.242,0.149,0.116,0.095,0.012,0.002,0.002])
                emp_ratio=(emp_ratio1+emp_ratio2)/2
        elif self.year==2019: # 2019, päivitä
            if g==1: # naiset
                emp_ratio=np.array([0.360,0.612,0.625,0.626,0.641,0.672,0.718,0.740,0.755,0.773,0.780,0.784,0.794,0.799,0.802,0.814,0.820,0.831,0.845,0.853,0.859,0.872,0.880,0.891,0.897,0.900,0.903,0.903,0.903,0.906,0.904,0.901,0.900,0.901,0.898,0.896,0.890,0.887,0.875,0.870,0.858,0.844,0.812,0.781,0.701,0.458,0.253,0.137,0.100,0.082,0.012,0.004,0.003])
            else: # miehet
                emp_ratio=np.array([0.276,0.503,0.508,0.627,0.642,0.666,0.714,0.761,0.795,0.819,0.840,0.852,0.858,0.866,0.877,0.878,0.879,0.889,0.892,0.893,0.895,0.901,0.900,0.905,0.906,0.909,0.906,0.902,0.903,0.900,0.899,0.896,0.893,0.887,0.885,0.877,0.873,0.864,0.850,0.837,0.826,0.809,0.775,0.741,0.663,0.428,0.242,0.149,0.116,0.095,0.012,0.002,0.002])
        elif self.year==2020: # 2019, päivitä
            if g==1: # naiset
                emp_ratio=np.array([0.360,0.612,0.625,0.626,0.641,0.672,0.718,0.740,0.755,0.773,0.780,0.784,0.794,0.799,0.802,0.814,0.820,0.831,0.845,0.853,0.859,0.872,0.880,0.891,0.897,0.900,0.903,0.903,0.903,0.906,0.904,0.901,0.900,0.901,0.898,0.896,0.890,0.887,0.875,0.870,0.858,0.844,0.812,0.781,0.701,0.458,0.253,0.137,0.100,0.082,0.012,0.004,0.003])
            else: # miehet
                emp_ratio=np.array([0.276,0.503,0.508,0.627,0.642,0.666,0.714,0.761,0.795,0.819,0.840,0.852,0.858,0.866,0.877,0.878,0.879,0.889,0.892,0.893,0.895,0.901,0.900,0.905,0.906,0.909,0.906,0.902,0.903,0.900,0.899,0.896,0.893,0.887,0.885,0.877,0.873,0.864,0.850,0.837,0.826,0.809,0.775,0.741,0.663,0.428,0.242,0.149,0.116,0.095,0.012,0.002,0.002])
        elif self.year==2021: # 2019, päivitä
            if g==1: # naiset
                emp_ratio=np.array([0.360,0.612,0.625,0.626,0.641,0.672,0.718,0.740,0.755,0.773,0.780,0.784,0.794,0.799,0.802,0.814,0.820,0.831,0.845,0.853,0.859,0.872,0.880,0.891,0.897,0.900,0.903,0.903,0.903,0.906,0.904,0.901,0.900,0.901,0.898,0.896,0.890,0.887,0.875,0.870,0.858,0.844,0.812,0.781,0.701,0.458,0.253,0.137,0.100,0.082,0.012,0.004,0.003])
            else: # miehet
                emp_ratio=np.array([0.276,0.503,0.508,0.627,0.642,0.666,0.714,0.761,0.795,0.819,0.840,0.852,0.858,0.866,0.877,0.878,0.879,0.889,0.892,0.893,0.895,0.901,0.900,0.905,0.906,0.909,0.906,0.902,0.903,0.900,0.899,0.896,0.893,0.887,0.885,0.877,0.873,0.864,0.850,0.837,0.826,0.809,0.775,0.741,0.663,0.428,0.242,0.149,0.116,0.095,0.012,0.002,0.002])
        elif self.year==2022: # 2019, päivitä
            if g==1: # naiset
                emp_ratio=np.array([0.360,0.612,0.625,0.626,0.641,0.672,0.718,0.740,0.755,0.773,0.780,0.784,0.794,0.799,0.802,0.814,0.820,0.831,0.845,0.853,0.859,0.872,0.880,0.891,0.897,0.900,0.903,0.903,0.903,0.906,0.904,0.901,0.900,0.901,0.898,0.896,0.890,0.887,0.875,0.870,0.858,0.844,0.812,0.781,0.701,0.458,0.253,0.137,0.100,0.082,0.012,0.004,0.003])
            else: # miehet
                emp_ratio=np.array([0.276,0.503,0.508,0.627,0.642,0.666,0.714,0.761,0.795,0.819,0.840,0.852,0.858,0.866,0.877,0.878,0.879,0.889,0.892,0.893,0.895,0.901,0.900,0.905,0.906,0.909,0.906,0.902,0.903,0.900,0.899,0.896,0.893,0.887,0.885,0.877,0.873,0.864,0.850,0.837,0.826,0.809,0.775,0.741,0.663,0.428,0.242,0.149,0.116,0.095,0.012,0.002,0.002])
        elif self.year==2023: # 2019, päivitä
            if g==1: # naiset
                emp_ratio=np.array([0.360,0.612,0.625,0.626,0.641,0.672,0.718,0.740,0.755,0.773,0.780,0.784,0.794,0.799,0.802,0.814,0.820,0.831,0.845,0.853,0.859,0.872,0.880,0.891,0.897,0.900,0.903,0.903,0.903,0.906,0.904,0.901,0.900,0.901,0.898,0.896,0.890,0.887,0.875,0.870,0.858,0.844,0.812,0.781,0.701,0.458,0.253,0.137,0.100,0.082,0.012,0.004,0.003])
            else: # miehet
                emp_ratio=np.array([0.276,0.503,0.508,0.627,0.642,0.666,0.714,0.761,0.795,0.819,0.840,0.852,0.858,0.866,0.877,0.878,0.879,0.889,0.892,0.893,0.895,0.901,0.900,0.905,0.906,0.909,0.906,0.902,0.903,0.900,0.899,0.896,0.893,0.887,0.885,0.877,0.873,0.864,0.850,0.837,0.826,0.809,0.775,0.741,0.663,0.428,0.242,0.149,0.116,0.095,0.012,0.002,0.002])
        elif self.year==2024: # 2019, päivitä
            if g==1: # naiset
                emp_ratio=np.array([0.360,0.612,0.625,0.626,0.641,0.672,0.718,0.740,0.755,0.773,0.780,0.784,0.794,0.799,0.802,0.814,0.820,0.831,0.845,0.853,0.859,0.872,0.880,0.891,0.897,0.900,0.903,0.903,0.903,0.906,0.904,0.901,0.900,0.901,0.898,0.896,0.890,0.887,0.875,0.870,0.858,0.844,0.812,0.781,0.701,0.458,0.253,0.137,0.100,0.082,0.012,0.004,0.003])
            else: # miehet
                emp_ratio=np.array([0.276,0.503,0.508,0.627,0.642,0.666,0.714,0.761,0.795,0.819,0.840,0.852,0.858,0.866,0.877,0.878,0.879,0.889,0.892,0.893,0.895,0.901,0.900,0.905,0.906,0.909,0.906,0.902,0.903,0.900,0.899,0.896,0.893,0.887,0.885,0.877,0.873,0.864,0.850,0.837,0.826,0.809,0.775,0.741,0.663,0.428,0.242,0.149,0.116,0.095,0.012,0.002,0.002])
        else:
            print('Empstats, unknown year',self.year)

        return self.map_ratios(emp_ratio)

    def unemp_stats_tyossakayntitutkimus(self,g=0):
        '''
        Työttömien osuus väestöstö
        Lähde: Tilastokeskus, Työssäkäyntitilasto
        Lista Tilastokeskuksen tietokannoista / StatFin / Työssäkäynti / 115c -- Väestö pääasiallisen toiminnan, sukupuolen, iän (1-v) ja vuoden mukaan, 1987-2020
        https://statfin.stat.fi/PxWeb/pxweb/fi/StatFin/StatFin__tyokay/statfin_tyokay_pxt_115c.px/table/tableViewLayout1/
        '''
        emp_ratio=np.zeros(self.n_time)
        if self.year==2018:
            if g==0:
                emp_ratio=np.array([0.018,0.101,0.104,0.083,0.077,0.075,0.075,0.078,0.078,0.078,0.080,0.080,0.081,0.077,0.079,0.078,0.076,0.075,0.074,0.072,0.074,0.070,0.071,0.068,0.069,0.069,0.069,0.072,0.072,0.074,0.076,0.078,0.078,0.078,0.081,0.081,0.082,0.084,0.087,0.087,0.089,0.097,0.108,0.131,0.115,0.062,0.030,0,0,0,0,0,0])
            elif g==1: # naiset
                emp_ratio=np.array([0.016,0.082,0.073,0.063,0.062,0.060,0.060,0.065,0.066,0.066,0.069,0.070,0.072,0.071,0.071,0.070,0.071,0.070,0.069,0.070,0.070,0.065,0.066,0.064,0.065,0.064,0.065,0.065,0.066,0.066,0.068,0.067,0.070,0.070,0.069,0.071,0.071,0.072,0.074,0.076,0.076,0.083,0.097,0.116,0.105,0.057,0.031,0,0,0,0,0,0])
            else: # miehet
                emp_ratio=np.array([0.019,0.119,0.133,0.102,0.091,0.089,0.089,0.091,0.089,0.089,0.091,0.089,0.089,0.083,0.085,0.085,0.080,0.081,0.080,0.075,0.077,0.075,0.074,0.072,0.073,0.074,0.074,0.078,0.076,0.083,0.085,0.089,0.087,0.086,0.092,0.091,0.094,0.096,0.101,0.099,0.102,0.110,0.120,0.146,0.125,0.066,0.028,0,0,0,0,0,0])
        elif self.year==2019:
            if g==0:
                emp_ratio=np.array([0.019,0.100,0.104,0.083,0.076,0.072,0.077,0.077,0.077,0.079,0.079,0.077,0.079,0.080,0.078,0.079,0.078,0.076,0.074,0.075,0.074,0.074,0.070,0.071,0.069,0.071,0.070,0.071,0.073,0.073,0.075,0.077,0.080,0.080,0.081,0.083,0.083,0.086,0.087,0.089,0.091,0.097,0.105,0.117,0.116,0.079,0.030,0,0,0,0,0,0])
            elif g==1: # naiset
                emp_ratio=np.array([0.017,0.074,0.068,0.060,0.057,0.056,0.060,0.058,0.062,0.064,0.066,0.065,0.066,0.068,0.070,0.071,0.069,0.069,0.066,0.067,0.068,0.068,0.064,0.065,0.062,0.064,0.063,0.062,0.064,0.066,0.064,0.067,0.068,0.068,0.068,0.068,0.070,0.072,0.072,0.072,0.076,0.082,0.090,0.104,0.102,0.072,0.029,0,0,0,0,0,0])
            else: # miehet
                emp_ratio=np.array([0.021,0.124,0.137,0.104,0.094,0.088,0.093,0.094,0.092,0.093,0.090,0.089,0.090,0.092,0.086,0.087,0.086,0.083,0.083,0.082,0.079,0.080,0.077,0.077,0.075,0.078,0.078,0.080,0.081,0.080,0.086,0.086,0.092,0.091,0.094,0.098,0.097,0.099,0.103,0.107,0.107,0.112,0.121,0.131,0.130,0.087,0.031,0,0,0,0,0,0])
        elif self.year==2020:
            if g==0: # päivitä
                emp_ratio=np.array([0.022295,0.133904,0.141523,0.111656,0.099754,0.097140,0.100274,0.107174,0.111871,0.112053,0.107161,0.106812,0.109634,0.111049,0.110364,0.107872,0.109229,0.106739,0.104432,0.105435,0.104113,0.103623,0.102500,0.100202,0.102063,0.100063,0.101720,0.099358,0.100297,0.105315,0.103677,0.103766,0.105810,0.109568,0.109797,0.111986,0.115004,0.114500,0.115923,0.116622,0.121842,0.126491,0.133517,0.142857,0.151331,0.124418,0.047200,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000])
            elif g==1: # naiset
                emp_ratio=np.array([0.020506,0.105024,0.099553,0.084536,0.076902,0.078568,0.082257,0.089703,0.091449,0.094026,0.089670,0.090291,0.093467,0.099586,0.095507,0.094737,0.095768,0.093543,0.093834,0.091719,0.094233,0.094295,0.092932,0.088763,0.090522,0.088451,0.088742,0.087792,0.088632,0.093748,0.089958,0.089431,0.092863,0.091430,0.093587,0.094660,0.095772,0.096882,0.097421,0.096937,0.102396,0.107176,0.114036,0.123476,0.132931,0.109338,0.043312,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000])
            else: # miehet
                emp_ratio=np.array([0.023992,0.161418,0.180503,0.136877,0.121249,0.114809,0.117147,0.123625,0.131239,0.129130,0.123501,0.122287,0.124766,0.121804,0.124293,0.120119,0.121804,0.119073,0.114369,0.118336,0.113273,0.112462,0.111496,0.111108,0.112940,0.111158,0.114015,0.110258,0.111542,0.116281,0.116782,0.117832,0.118546,0.127203,0.125818,0.129102,0.134107,0.132057,0.134428,0.136395,0.141363,0.146163,0.153634,0.162861,0.170449,0.140159,0.051289,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000])
        elif self.year==2021: # 2019
            if g==0:
                emp_ratio=np.array([0.019,0.100,0.104,0.083,0.076,0.072,0.077,0.077,0.077,0.079,0.079,0.077,0.079,0.080,0.078,0.079,0.078,0.076,0.074,0.075,0.074,0.074,0.070,0.071,0.069,0.071,0.070,0.071,0.073,0.073,0.075,0.077,0.080,0.080,0.081,0.083,0.083,0.086,0.087,0.089,0.091,0.097,0.105,0.117,0.116,0.079,0.030,0,0,0,0,0,0])
            elif g==1: # naiset
                emp_ratio=np.array([0.017,0.074,0.068,0.060,0.057,0.056,0.060,0.058,0.062,0.064,0.066,0.065,0.066,0.068,0.070,0.071,0.069,0.069,0.066,0.067,0.068,0.068,0.064,0.065,0.062,0.064,0.063,0.062,0.064,0.066,0.064,0.067,0.068,0.068,0.068,0.068,0.070,0.072,0.072,0.072,0.076,0.082,0.090,0.104,0.102,0.072,0.029,0,0,0,0,0,0])
            else: # miehet
                emp_ratio=np.array([0.021,0.124,0.137,0.104,0.094,0.088,0.093,0.094,0.092,0.093,0.090,0.089,0.090,0.092,0.086,0.087,0.086,0.083,0.083,0.082,0.079,0.080,0.077,0.077,0.075,0.078,0.078,0.080,0.081,0.080,0.086,0.086,0.092,0.091,0.094,0.098,0.097,0.099,0.103,0.107,0.107,0.112,0.121,0.131,0.130,0.087,0.031,0,0,0,0,0,0])
        elif self.year==2022: # 2019
            if g==0:
                emp_ratio=np.array([0.019,0.100,0.104,0.083,0.076,0.072,0.077,0.077,0.077,0.079,0.079,0.077,0.079,0.080,0.078,0.079,0.078,0.076,0.074,0.075,0.074,0.074,0.070,0.071,0.069,0.071,0.070,0.071,0.073,0.073,0.075,0.077,0.080,0.080,0.081,0.083,0.083,0.086,0.087,0.089,0.091,0.097,0.105,0.117,0.116,0.079,0.030,0,0,0,0,0,0])
            elif g==1: # naiset
                emp_ratio=np.array([0.017,0.074,0.068,0.060,0.057,0.056,0.060,0.058,0.062,0.064,0.066,0.065,0.066,0.068,0.070,0.071,0.069,0.069,0.066,0.067,0.068,0.068,0.064,0.065,0.062,0.064,0.063,0.062,0.064,0.066,0.064,0.067,0.068,0.068,0.068,0.068,0.070,0.072,0.072,0.072,0.076,0.082,0.090,0.104,0.102,0.072,0.029,0,0,0,0,0,0])
            else: # miehet
                emp_ratio=np.array([0.021,0.124,0.137,0.104,0.094,0.088,0.093,0.094,0.092,0.093,0.090,0.089,0.090,0.092,0.086,0.087,0.086,0.083,0.083,0.082,0.079,0.080,0.077,0.077,0.075,0.078,0.078,0.080,0.081,0.080,0.086,0.086,0.092,0.091,0.094,0.098,0.097,0.099,0.103,0.107,0.107,0.112,0.121,0.131,0.130,0.087,0.031,0,0,0,0,0,0])
        elif self.year==2023: # 2019
            if g==0:
                emp_ratio=np.array([0.019,0.100,0.104,0.083,0.076,0.072,0.077,0.077,0.077,0.079,0.079,0.077,0.079,0.080,0.078,0.079,0.078,0.076,0.074,0.075,0.074,0.074,0.070,0.071,0.069,0.071,0.070,0.071,0.073,0.073,0.075,0.077,0.080,0.080,0.081,0.083,0.083,0.086,0.087,0.089,0.091,0.097,0.105,0.117,0.116,0.079,0.030,0,0,0,0,0,0])
            elif g==1: # naiset
                emp_ratio=np.array([0.017,0.074,0.068,0.060,0.057,0.056,0.060,0.058,0.062,0.064,0.066,0.065,0.066,0.068,0.070,0.071,0.069,0.069,0.066,0.067,0.068,0.068,0.064,0.065,0.062,0.064,0.063,0.062,0.064,0.066,0.064,0.067,0.068,0.068,0.068,0.068,0.070,0.072,0.072,0.072,0.076,0.082,0.090,0.104,0.102,0.072,0.029,0,0,0,0,0,0])
            else: # miehet
                emp_ratio=np.array([0.021,0.124,0.137,0.104,0.094,0.088,0.093,0.094,0.092,0.093,0.090,0.089,0.090,0.092,0.086,0.087,0.086,0.083,0.083,0.082,0.079,0.080,0.077,0.077,0.075,0.078,0.078,0.080,0.081,0.080,0.086,0.086,0.092,0.091,0.094,0.098,0.097,0.099,0.103,0.107,0.107,0.112,0.121,0.131,0.130,0.087,0.031,0,0,0,0,0,0])
        elif self.year==2024: # 2019
            if g==0:
                emp_ratio=np.array([0.019,0.100,0.104,0.083,0.076,0.072,0.077,0.077,0.077,0.079,0.079,0.077,0.079,0.080,0.078,0.079,0.078,0.076,0.074,0.075,0.074,0.074,0.070,0.071,0.069,0.071,0.070,0.071,0.073,0.073,0.075,0.077,0.080,0.080,0.081,0.083,0.083,0.086,0.087,0.089,0.091,0.097,0.105,0.117,0.116,0.079,0.030,0,0,0,0,0,0])
            elif g==1: # naiset
                emp_ratio=np.array([0.017,0.074,0.068,0.060,0.057,0.056,0.060,0.058,0.062,0.064,0.066,0.065,0.066,0.068,0.070,0.071,0.069,0.069,0.066,0.067,0.068,0.068,0.064,0.065,0.062,0.064,0.063,0.062,0.064,0.066,0.064,0.067,0.068,0.068,0.068,0.068,0.070,0.072,0.072,0.072,0.076,0.082,0.090,0.104,0.102,0.072,0.029,0,0,0,0,0,0])
            else: # miehet
                emp_ratio=np.array([0.021,0.124,0.137,0.104,0.094,0.088,0.093,0.094,0.092,0.093,0.090,0.089,0.090,0.092,0.086,0.087,0.086,0.083,0.083,0.082,0.079,0.080,0.077,0.077,0.075,0.078,0.078,0.080,0.081,0.080,0.086,0.086,0.092,0.091,0.094,0.098,0.097,0.099,0.103,0.107,0.107,0.112,0.121,0.131,0.130,0.087,0.031,0,0,0,0,0,0])
        else:
            print('Empstats, unknown year',self.year)
        
        return self.map_ratios(emp_ratio)
        
    def unemp_stats_tyovoimatutkimus(self,g=0):
        '''
        työttömien osuus väestöstö
        Lähde: Tilastokeskus, tyovoimatutkimus
        '''
        x=np.array([22.5,27.5,32.5,37.5,42.5,47.5,52.5,57.5,62.5,67.5,72.5])
        if self.year==2018:
            if g==0: # kaikki
                emp=np.array([0.092592593,0.067605634,0.0625,0.050991501,0.041420118,0.046583851,0.048913043,0.049046322,0.043835616,0,0])
            elif g==1: # naiset
                emp=np.array([0.088607595,0.058139535,0.057803468,0.041543027,0.036144578,0.05,0.044444444,0.043478261,0.037634409,0,0])
            else: # miehet
                emp=np.array([0.096969697,0.081967213,0.067039106,0.048022599,0.046511628,0.043478261,0.053191489,0.06010929,0.05027933,0,0])
        elif self.year==2019:
            if g==0: # kaikki
                emp=np.array([0.094637224,0.058988764,0.054285714,0.044692737,0.034782609,0.031746032,0.041551247,0.051490515,0.038781163,0,0])
            elif g==1: # naiset
                emp=np.array([0.074324324,0.051724138,0.052631579,0.038011696,0.035928144,0.026490066,0.038888889,0.043010753,0.027322404,0,0])
            else: # miehet
                emp=np.array([0.111764706,0.065934066,0.055865922,0.041551247,0.033707865,0.036809816,0.044198895,0.06010929,0.04494382,0,0])
        elif self.year==2020:
            if g==0: # kaikki
                emp=np.array([0.115755627,0.070422535,0.059490085,0.052486188,0.040229885,0.037974684,0.042613636,0.054200542,0.04735376,0,0])
            elif g==1: # naiset
                emp=np.array([0.092198582,0.06547619,0.055865922,0.043604651,0.035502959,0.039473684,0.04,0.054945055,0.038043478,0,0])
            else: # miehet
                emp=np.array([0.135294118,0.07486631,0.063218391,0.046448087,0.044692737,0.042682927,0.04519774,0.053475936,0.057471264,0,0])
        elif self.year==2021: # päivitä
            if g==0: # kaikki
                emp=np.array([0.094637224,0.058988764,0.054285714,0.044692737,0.034782609,0.031746032,0.041551247,0.051490515,0.038781163,0,0])
            elif g==1: # naiset
                emp=np.array([0.074324324,0.051724138,0.052631579,0.038011696,0.035928144,0.026490066,0.038888889,0.043010753,0.027322404,0,0])
            else: # miehet
                emp=np.array([0.111764706,0.065934066,0.055865922,0.041551247,0.033707865,0.036809816,0.044198895,0.06010929,0.04494382,0,0])
        elif self.year==2022: # päivitä
            if g==0: # kaikki
                emp=np.array([0.094637224,0.058988764,0.054285714,0.044692737,0.034782609,0.031746032,0.041551247,0.051490515,0.038781163,0,0])
            elif g==1: # naiset
                emp=np.array([0.074324324,0.051724138,0.052631579,0.038011696,0.035928144,0.026490066,0.038888889,0.043010753,0.027322404,0,0])
            else: # miehet
                emp=np.array([0.111764706,0.065934066,0.055865922,0.041551247,0.033707865,0.036809816,0.044198895,0.06010929,0.04494382,0,0])
        elif self.year==2023: # päivitä
            if g==0: # kaikki
                emp=np.array([0.094637224,0.058988764,0.054285714,0.044692737,0.034782609,0.031746032,0.041551247,0.051490515,0.038781163,0,0])
            elif g==1: # naiset
                emp=np.array([0.074324324,0.051724138,0.052631579,0.038011696,0.035928144,0.026490066,0.038888889,0.043010753,0.027322404,0,0])
            else: # miehet
                emp=np.array([0.111764706,0.065934066,0.055865922,0.041551247,0.033707865,0.036809816,0.044198895,0.06010929,0.04494382,0,0])
        elif self.year==2024: # päivitä
            if g==0: # kaikki
                emp=np.array([0.094637224,0.058988764,0.054285714,0.044692737,0.034782609,0.031746032,0.041551247,0.051490515,0.038781163,0,0])
            elif g==1: # naiset
                emp=np.array([0.074324324,0.051724138,0.052631579,0.038011696,0.035928144,0.026490066,0.038888889,0.043010753,0.027322404,0,0])
            else: # miehet
                emp=np.array([0.111764706,0.065934066,0.055865922,0.041551247,0.033707865,0.036809816,0.044198895,0.06010929,0.04494382,0,0])
        else:
            print('Empstats, unknown year',self.year)
            
        f = interp1d(x, emp,fill_value='extrapolate')
        jasenyys_x = np.linspace(self.min_age, self.max_age+1, num=self.max_age-self.min_age+1, endpoint=True)
        rate=f(jasenyys_x)

        return self.map_ratios(rate)
        
    def unemp_stats(self,g=0,tyossakayntitutkimus=True):
        if tyossakayntitutkimus:
            return self.unemp_stats_tyossakayntitutkimus(g=g)
        else:
            return self.unemp_stats_tyovoimatutkimus(g=g)
        
    def unempratio_stats(self,g=0,tyossakayntitutkimus=False):
        '''
        Työttömien osuus työvoimasta
        Lähde: Tilastokeskus
        '''
        emp_ratio=self.emp_stats(g=g,tyossakayntitutkimus=tyossakayntitutkimus)
        unemp_ratio=self.unemp_stats(g=g,tyossakayntitutkimus=tyossakayntitutkimus)
        ratio=unemp_ratio/(emp_ratio+unemp_ratio)
        
        return ratio # ei mapata, on jo tehty!
            
    def get_demog(self):
        # vuosi 2019
        if self.year==2019:
            demog=np.array([58939,59711,
                            60796,59796,62211,64230,66911,69316,69568,72329,71682,72790,  # 20-29 y
                            71313,71434,68069,68967,70985,72961,74223,73437,70361,69800,  # 30-39 y
                            69056,69134,69773,69996,68516,65276,59488,61407,63138,65064,  # 40-49 y
                            66339,70970,72571,72862,73052,74260,74821,73880,73260,72650,  # 50-59 y
                            72007,69453,72098,73585,72476,72173,70726,72730,69771,71560,  # 60-69 y
                            73079,73689,72408,69492,61063,47990,44814,35182,49918,34273  # 70-79 y
                            ])
        elif self.year==2018: # 2018
            demog=np.array([59600,60710,
                            59640,61894,63720,66388,68734,69063,71766,71153,72182,70708,
                            70898,67638,68548,70664,72648,73972,73161,70145,69593,68880,
                            69052,69678,69956,68421,65258,59442,61378,63178,65147,66433,
                            71078,72753,73031,73207,74480,75114,74138,73574,72991,72416,
                            69831,72549,74158,73129,72894,71459,73497,70572,72530,74150,
                            74793,73683,70796,62308,49080,45971,36179,51476,35499,40134  # 70-79 y
                            ])
        elif self.year==2020: # 2018
            demog=np.array([59600,60710,
                            59640,61894,63720,66388,68734,69063,71766,71153,72182,70708,
                            70898,67638,68548,70664,72648,73972,73161,70145,69593,68880,
                            69052,69678,69956,68421,65258,59442,61378,63178,65147,66433,
                            71078,72753,73031,73207,74480,75114,74138,73574,72991,72416,
                            69831,72549,74158,73129,72894,71459,73497,70572,72530,74150,
                            74793,73683,70796,62308,49080,45971,36179,51476,35499,40134  # 70-79 y
                            ])
        elif self.year==2021: # 2018
            demog=np.array([59600,60710,
                            59640,61894,63720,66388,68734,69063,71766,71153,72182,70708,
                            70898,67638,68548,70664,72648,73972,73161,70145,69593,68880,
                            69052,69678,69956,68421,65258,59442,61378,63178,65147,66433,
                            71078,72753,73031,73207,74480,75114,74138,73574,72991,72416,
                            69831,72549,74158,73129,72894,71459,73497,70572,72530,74150,
                            74793,73683,70796,62308,49080,45971,36179,51476,35499,40134  # 70-79 y
                            ])
        elif self.year==2022: # 2018
            demog=np.array([59600,60710,
                            59640,61894,63720,66388,68734,69063,71766,71153,72182,70708,
                            70898,67638,68548,70664,72648,73972,73161,70145,69593,68880,
                            69052,69678,69956,68421,65258,59442,61378,63178,65147,66433,
                            71078,72753,73031,73207,74480,75114,74138,73574,72991,72416,
                            69831,72549,74158,73129,72894,71459,73497,70572,72530,74150,
                            74793,73683,70796,62308,49080,45971,36179,51476,35499,40134  # 70-79 y
                            ])
        elif self.year==2023: # 2018
            demog=np.array([59600,60710,
                            59640,61894,63720,66388,68734,69063,71766,71153,72182,70708,
                            70898,67638,68548,70664,72648,73972,73161,70145,69593,68880,
                            69052,69678,69956,68421,65258,59442,61378,63178,65147,66433,
                            71078,72753,73031,73207,74480,75114,74138,73574,72991,72416,
                            69831,72549,74158,73129,72894,71459,73497,70572,72530,74150,
                            74793,73683,70796,62308,49080,45971,36179,51476,35499,40134  # 70-79 y
                            ])
        elif self.year==2024: # päivitä
            demog=np.array([59600,60710,
                            59640,61894,63720,66388,68734,69063,71766,71153,72182,70708,
                            70898,67638,68548,70664,72648,73972,73161,70145,69593,68880,
                            69052,69678,69956,68421,65258,59442,61378,63178,65147,66433,
                            71078,72753,73031,73207,74480,75114,74138,73574,72991,72416,
                            69831,72549,74158,73129,72894,71459,73497,70572,72530,74150,
                            74793,73683,70796,62308,49080,45971,36179,51476,35499,40134  # 70-79 y
                            ])
        else:
            print('Empstats, unknown year',self.year)

        demo_min_age=18
        demo_max_age=79
                 
        demog2=np.zeros((self.n_time,1))
        k2=0
        for k in np.arange(self.min_age,self.max_age,self.timestep):
            ind=min(demo_max_age,int(np.floor(k)))-demo_min_age
            demog2[k2]=demog[ind]
            k2+=1
            
        demog2[-2:]=demog2[-3]

        return demog2

    def map_ratios(self,ratio,min_age=18,max_age=70):
        emp_ratio=np.zeros(self.n_time)
        for a in range(min_age,max_age):
            emp_ratio[self.map_age(a):self.map_age(a+1)]=ratio[a-min_age]
            
        return emp_ratio

    def map_age(self,age,start_zero=False):
        if start_zero:
            return int((age)*self.inv_timestep)
        else:
            return int((age-self.min_age)*self.inv_timestep)


    def stat_wageratio(self):
        def update(x,vals,newx):
            f = interp1d(x, vals,fill_value='extrapolate')
            newvals=f(newx)
            
            return self.map_ratios(newvals)
    
        x=[18,25,35,45,55,65]
        newx = np.linspace(self.min_age, self.max_age, num=self.max_age-self.min_age+1, endpoint=True)
        men_lowmid=update(x,np.array([0.79,0.74,0.67,0.63,0.61,0.61]),newx)
        men_highmid=update(x,np.array([1.25,1.40,1.51,1.58,1.65,1.65]),newx)
        women_lowmid=update(x,np.array([0.85,0.80,0.74,0.69,0.70,0.71]),newx)
        women_highmid=update(x,np.array([1.21,1.40,1.55,1.68,1.71,1.67]),newx)
        xx=self.map_ratios(newx)
        
        return xx,men_lowmid,men_highmid,women_lowmid,women_highmid
    
    def stat_days(self,scale=False):
        '''
        HTV-tiedot
        '''
        demog2=self.get_demog()

        #scalex=demog2/self.n_pop
        htv=6*52
        htv_tt=21.5*12
        h_to_v=1.0 / 1860.0

        q={}
        if self.year==2018:
            q['yhteensä']=np.sum(np.sum(demog2))*self.timestep
            q['työllisiä']= 4_132_662_000 * h_to_v # yritykset, statfin
            q['työssä ja eläkkeellä']=31_000 # ETK 2020
            q['työssä yli 63v']=86_000 # ETK 2020
            q['palkansaajia']= 3_508_270_000 * h_to_v # yritykset, statfin
            q['ansiosidonnaisella']=(31_269_904+7_553_200)/htv_tt  # Kelan tilasto 31.12.2018
            q['tmtuella']=49_880_321/htv_tt   # Kelan tilasto 31.12.2018
            q['työkyvyttömyyseläke']=198_762
            q['isyysvapaalla']=(1_268_710+155_307)/htv # Kelan tilasto 2018
            q['kotihoidontuella']=42_042  # saajia Kelan tilasto 2018
            q['vanhempainvapaalla']=(4_964_669+7_590_429)/htv  # Kelan tilasto 2022, äideille
            q['pareja']=0
            q['lapsia']=0
        elif self.year==2019:
            q['yhteensä']=np.sum(np.sum(demog2))*self.timestep
            q['työllisiä']= 4_141_593_000 * h_to_v # yritykset, statfin
            q['työssä ja eläkkeellä']=31_000 # ETK 2020
            q['työssä yli 63v']=86_000 # ETK 2020
            q['palkansaajia']= 3_512_025_000 * h_to_v  # Kelan tilasto 31.12.2018
            q['ansiosidonnaisella']=(27_858_120+6_972_312)/htv_tt  # Kelan tilasto 31.12.2018
            q['tmtuella']=48_454_665/htv_tt   # Kelan tilasto 31.12.2019
            q['työkyvyttömyyseläke']=195_316
            q['isyysvapaalla']=(1_271_141+156_927)/htv # Kelan tilasto 2022
            q['kotihoidontuella']=42_042  # saajia Kelan tilasto 2018
            q['vanhempainvapaalla']=(4_727_809+7_070_436)/htv  # Kelan tilasto 2022, äideille
            q['pareja']=0
            q['lapsia']=0
        elif self.year==2020:
            q['yhteensä']=np.sum(np.sum(demog2))*self.timestep
            q['työllisiä']= 4_062_562_000 * h_to_v # yritykset, statfin
            q['työssä ja eläkkeellä']=31_000 # ETK 2020
            q['työssä yli 63v']=86_000 # ETK 2020
            q['palkansaajia']= 3_459_030_000 * h_to_v #
            q['ansiosidonnaisella']=(40_448_224+12_425_099)/htv_tt  # Kelan tilasto 31.12.2018
            q['tmtuella']=52_449_825/htv_tt   # Kelan tilasto 31.12.2020
            q['työkyvyttömyyseläke']=191_597
            q['isyysvapaalla']=(1_287_660+170_034)/htv # Kelan tilasto 2022
            q['kotihoidontuella']=42_042  # saajia Kelan tilasto 2018
            q['vanhempainvapaalla']=(4_819_360+7_162_896)/htv  # Kelan tilasto 2022, äideille
            q['pareja']=0
            q['lapsia']=0
        elif self.year==2021:
            q['yhteensä']=np.sum(np.sum(demog2))*self.timestep
            q['työllisiä']= 4_062_562_000 * h_to_v # yritykset, statfin
            q['työssä ja eläkkeellä']=31_000 # ETK 2020
            q['työssä yli 63v']=86_000 # ETK 2020
            q['palkansaajia']= 3_459_030_000 * h_to_v #
            q['ansiosidonnaisella']=(37_549_237+7_553_200)/htv_tt  # Kelan tilasto 31.12.2018
            q['tmtuella']=49_613_125/htv_tt   # Kelan tilasto 31.12.2021
            q['työkyvyttömyyseläke']=185_991  
            q['isyysvapaalla']=(1_356_711+196_429)/htv # Kelan tilasto 2022, isyysvapaa+vanhempainvapaa
            q['kotihoidontuella']=42_042  # saajia Kelan tilasto 2018
            q['vanhempainvapaalla']=(5_084_479+7_311_157)/htv  # Kelan tilasto 2022, äideille
            q['pareja']=0
            q['lapsia']=0
        elif self.year==2022:
            q['yhteensä']=np.sum(np.sum(demog2))*self.timestep
            q['työllisiä']= 4_062_562_000 * h_to_v # yritykset, statfin
            q['työssä ja eläkkeellä']=31_000 # ETK 2020
            q['työssä yli 63v']=86_000 # ETK 2020
            q['palkansaajia']= 3_459_030_000 * h_to_v #
            q['ansiosidonnaisella']=(30_676_200+11_611_154)/htv_tt  # Kelan tilasto 31.12.2018
            q['tmtuella']=49_880_300/htv_tt   # Kelan tilasto 31.12.2018
            q['työkyvyttömyyseläke']=185_991  
            q['isyysvapaalla']=1_424_000/htv # Kelan tilasto 2018
            q['kotihoidontuella']=42_042  # saajia Kelan tilasto 2018
            q['vanhempainvapaalla']=12_571_400/htv  # Kelan tilasto 2018, äideille
            q['pareja']=0
            q['lapsia']=0
        elif self.year==2023:
            q['yhteensä']=np.sum(np.sum(demog2))*self.timestep
            q['työllisiä']= 4_062_562_000 * h_to_v # yritykset, statfin
            q['työssä ja eläkkeellä']=31_000 # ETK 2020
            q['työssä yli 63v']=86_000 # ETK 2020
            q['palkansaajia']= 3_459_030_000 * h_to_v #
            q['ansiosidonnaisella']=(30_676_200+7_553_200)/htv_tt  # Kelan tilasto 31.12.2018
            q['tmtuella']=49_880_300/htv_tt   # Kelan tilasto 31.12.2018
            q['työkyvyttömyyseläke']=185_991  
            q['isyysvapaalla']=1_424_000/htv # Kelan tilasto 2018
            q['kotihoidontuella']=42_042  # saajia Kelan tilasto 2018
            q['vanhempainvapaalla']=12_571_400/htv  # Kelan tilasto 2018, äideille
            q['pareja']=0
            q['lapsia']=0
        elif self.year==2024: # päivitä
            q['yhteensä']=np.sum(np.sum(demog2))*self.timestep
            q['työllisiä']= 4_062_562_000 * h_to_v # yritykset, statfin
            q['työssä ja eläkkeellä']=31_000 # ETK 2020
            q['työssä yli 63v']=86_000 # ETK 2020
            q['palkansaajia']= 3_459_030_000 * h_to_v #
            q['ansiosidonnaisella']=(30_676_200+7_553_200)/htv_tt  # Kelan tilasto 31.12.2018
            q['tmtuella']=49_880_300/htv_tt   # Kelan tilasto 31.12.2018
            q['työkyvyttömyyseläke']=185_991  
            q['isyysvapaalla']=1_424_000/htv # Kelan tilasto 2018
            q['kotihoidontuella']=42_042  # saajia Kelan tilasto 2018
            q['vanhempainvapaalla']=12_571_400/htv  # Kelan tilasto 2018, äideille
            q['pareja']=0
            q['lapsia']=0

        return q    

    def stat_participants(self,scale=False,lkm=False):
        '''
        Lukumäärätiedot (EI HTV!)
        '''
        demog2=self.get_demog()

        #scalex=demog2/self.n_pop
        h_to_v=1.0 / 1860.0

        q={}
        if self.year==2018:
            q['yhteensä']=np.sum(demog2)*self.timestep
            q['työllisiä']=2_540_000 # TK
            q['työssä ja eläkkeellä']=31_000 # ETK 2020
            q['työssä yli 63v']=86_000 # ETK 2020
            q['palkansaajia']=2_204_000 # TK
            q['ansiosidonnaisella']=116_972+27_157  # Kelan tilasto 31.12.2018 # vuoden aikana 339 680
            q['tmtuella']=189_780  # Kelan tilasto 31.12.2018 # vuoden aikana 268 254
            q['isyysvapaalla']=59_640 # Kelan tilasto 2018
            q['kotihoidontuella']=42_042 # saajia Kelan tilasto 2018
            q['työkyvyttömyyseläke']=198_762
            q['vanhempainvapaalla']=84_387 # Kelan tilasto 2018
            q['opiskelijoita']=109076+111441
            q['ovella']=39_000
        elif self.year==2019:
            q['yhteensä']=np.sum(demog2)*self.timestep
            q['työllisiä']=2_566_000 # TK
            q['työssä ja eläkkeellä']=31_000 # ETK 2020
            q['työssä yli 63v']=86_000 # ETK 2020
            q['palkansaajia']=2_204_000 # TK
            q['ansiosidonnaisella']=116_972+27_157  # Kelan tilasto 31.12.2018
            q['isyysvapaalla']=59_640 # Kelan tilasto 2018
            q['kotihoidontuella']=42_042 # saajia Kelan tilasto 2018
            q['työkyvyttömyyseläke']=195_316
            q['vanhempainvapaalla']=84_387 # Kelan tilasto 2018
            q['opiskelijoita']=114433+109652
            q['ovella']=39_000
        elif self.year==2020:
            q['yhteensä']=np.sum(demog2)*self.timestep
            q['työllisiä']=2_528_000 # TK
            q['työssä yli 63v']=86_000 # ETK 2020
            q['työssä ja eläkkeellä']=31_000 # ETK 2020
            q['palkansaajia']=2_204_000 # TK
            q['ansiosidonnaisella']=116_972+27_157  # Kelan tilasto 31.12.2018
            q['tmtuella']=189_780  # Kelan tilasto 31.12.2018
            q['isyysvapaalla']=59_640 # Kelan tilasto 2018
            q['kotihoidontuella']=42_042 # saajia Kelan tilasto 2018
            q['työkyvyttömyyseläke']=191_597
            q['vanhempainvapaalla']=84_387 # Kelan tilasto 2018
            q['opiskelijoita']=126153+118325
            q['ovella']=39_000
        elif self.year==2021:
            q['yhteensä']=np.sum(demog2)*self.timestep
            q['työllisiä']=2_528_000 # TK
            q['työssä ja eläkkeellä']=31_000 # ETK 2020
            q['työssä yli 63v']=86_000 # ETK 2020
            q['palkansaajia']=2_204_000 # TK
            q['ansiosidonnaisella']=116_972+27_157  # Kelan tilasto 31.12.2018 # vuoden aikana 355 729
            q['tmtuella']=189_780  # Kelan tilasto 31.12.2018
            q['isyysvapaalla']=59_640 # Kelan tilasto 2018
            q['kotihoidontuella']=42_042 # saajia Kelan tilasto 2018
            q['työkyvyttömyyseläke']=185_991  
            q['vanhempainvapaalla']=84_387 # Kelan tilasto 2018
            q['opiskelijoita']=126153+118325
            q['ovella']=39_000
        elif self.year==2022:
            q['yhteensä']=np.sum(demog2)*self.timestep
            q['työllisiä']=2_528_000 # TK
            q['työssä ja eläkkeellä']=31_000 # ETK 2020
            q['työssä yli 63v']=86_000 # ETK 2020
            q['palkansaajia']=2_204_000 # TK
            q['ansiosidonnaisella']=116_972+27_157  # Kelan tilasto 31.12.2018
            q['tmtuella']=189_780  # Kelan tilasto 31.12.2018
            q['isyysvapaalla']=59_640 # Kelan tilasto 2018
            q['kotihoidontuella']=42_042 # saajia Kelan tilasto 2018
            q['työkyvyttömyyseläke']=185_991  
            q['vanhempainvapaalla']=84_387 # Kelan tilasto 2018
            q['opiskelijoita']=126153+118325
            q['ovella']=39_000
        elif self.year==2023:
            q['yhteensä']=np.sum(demog2)*self.timestep
            q['työllisiä']=2_528_000 # TK
            q['työssä ja eläkkeellä']=31_000 # ETK 2020
            q['työssä yli 63v']=86_000 # ETK 2020
            q['palkansaajia']=2_204_000 # TK
            q['ansiosidonnaisella']=116_972+27_157  # Kelan tilasto 31.12.2018
            q['tmtuella']=189_780  # Kelan tilasto 31.12.2018
            q['isyysvapaalla']=59_640 # Kelan tilasto 2018
            q['kotihoidontuella']=42_042 # saajia Kelan tilasto 2018
            q['työkyvyttömyyseläke']=185_991  
            q['vanhempainvapaalla']=84_387 # Kelan tilasto 2018
            q['opiskelijoita']=126153+118325
            q['ovella']=39_000
        elif self.year==2024: # päivitä
            q['yhteensä']=np.sum(demog2)*self.timestep
            q['työllisiä']=2_528_000 # TK
            q['työssä ja eläkkeellä']=31_000 # ETK 2020
            q['työssä yli 63v']=86_000 # ETK 2020
            q['palkansaajia']=2_204_000 # TK
            q['ansiosidonnaisella']=116_972+27_157  # Kelan tilasto 31.12.2018
            q['tmtuella']=189_780  # Kelan tilasto 31.12.2018
            q['isyysvapaalla']=59_640 # Kelan tilasto 2018
            q['kotihoidontuella']=42_042 # saajia Kelan tilasto 2018
            q['työkyvyttömyyseläke']=185_991  
            q['vanhempainvapaalla']=84_387 # Kelan tilasto 2018
            q['opiskelijoita']=126153+118325
            q['ovella']=39_000
        
        return q
        

    def stat_budget(self,scale=False):
        q={}
        if self.year==2018:
            q['tyotulosumma']=89_134_200_000 #+4_613_400_000+1_239_900_000 # lähde: ETK, tyel + julkinen + yel + myel
            q['tyotulosumma eielakkeella']=np.nan #+4_613_400_000+1_239_900_000 # lähde: ETK, tyel + julkinen + yel + myel
            q['etuusmeno']=0
            q['verot+maksut']=0   # tuloverot 30_763_000_000 ml YLE ja kirkollisvero
            q['verot+maksut+alv']=0   # tuloverot 30_763_000_000 ml YLE ja kirkollisvero
            q['valtionvero']=5_542_000_000
            q['kunnallisvero']=18_991_000_000 # 18_791_000_000 ?
            q['ptel']=5_560_000_000 # vai 6_804_000_000
            q['elakemaksut']=22_085_700_000 # Lähde: ETK
            q['tyottomyysvakuutusmaksu']=0.019*q['tyotulosumma']
            q['tyoelakemaksu']=21_982_900_000
            q['sairausvakuutusmaksu']=1_335_000_000+407_000_000
            q['ylevero']=497_000_000
            q['ansiopvraha']=1_930_846_464 # Kelasto
            q['peruspvraha']=1_964_486_581 # Kelasto
            q['asumistuki']=1_488_900_000 + 600_100_000 # yleinen plus eläkkeensaajan
            q['tyoelakemeno']=27_865_000_000
            q['kansanelakemeno']=2_099_444_514 # vain kansaneläkemeno (ml ve ja tk) ilman perhe-eläkkeitä
            q['takuuelakemeno']=2_357_000_000-q['kansanelakemeno']
            q['kokoelakemeno']=q['tyoelakemeno']+2_357_000_000
            q['elatustuki']=206_977_000
            q['lapsilisa']=1_369_269_187
            q['opintotuki']=417_404_073+54_057
            q['isyyspaivaraha']=104_212_164
            q['aitiyspaivaraha']=341_304_991+462_228_789
            q['kotihoidontuki']=245_768_701
            q['sairauspaivaraha']=835_761_522
            q['toimeentulotuki']=715_950_847
            #q['perustulo']=0
            q['pvhoitomaksu']=271_000_000
            q['alv']=18_020_000_000 # 21_364_000_000
            q['ta_maksut']=0.2057*q['tyotulosumma'] # karkea
        elif self.year==2019:
            q['tyotulosumma']=92_354_100_000 #+4_613_400_000+1_239_900_000 # lähde: ETK, tyel + julkinen + yel + myel
            q['tyotulosumma eielakkeella']=np.nan #+4_613_400_000+1_239_900_000 # lähde: ETK, tyel + julkinen + yel + myel
            q['etuusmeno']=0
            q['verot+maksut']=0   # tuloverot 30_763_000_000 ml YLE ja kirkollisvero
            q['verot+maksut+alv']=0   # tuloverot 30_763_000_000 ml YLE ja kirkollisvero
            q['valtionvero']=5_542_000_000
            q['kunnallisvero']=19_376_000_000
            q['ptel']=6_159_800_000 # vai 7_323_000_000
            q['elakemaksut']=23_150_000_000 # Lähde: ETK
            q['tyottomyysvakuutusmaksu']=0.019*q['tyotulosumma']
            q['tyoelakemaksu']=21_982_900_000
            q['sairausvakuutusmaksu']=1_335_000_000+407_000_000
            q['ylevero']=497_000_000
            q['ansiopvraha']=1_720_759_809 # Kelasto 
            q['peruspvraha']=1_869_864_476 # Kelasto
            q['asumistuki']=1_490_952_605 + 616_199_681 # yleinen plus eläkkeensaajan
            q['tyoelakemeno']=27_865_000_000
            q['kansanelakemeno']=2_054_030_972
            q['takuuelakemeno']=2_324_000_000-q['kansanelakemeno']
            q['kokoelakemeno']=q['tyoelakemeno']+2_357_000_000
            q['elatustuki']=206_977_000
            q['lapsilisa']=1_358_971_519
            q['opintotuki']=417_404_073+54_057
            q['isyyspaivaraha']=104_212_164
            q['aitiyspaivaraha']=341_304_991+462_228_789
            q['kotihoidontuki']=245_768_701
            q['sairauspaivaraha']=875_502_895
            q['toimeentulotuki']=715_950_847
            #q['perustulo']=0
            q['pvhoitomaksu']=271_000_000
            q['alv']=18_786_000_000 # Lähde: ?
            q['ta_maksut']=0.2057*q['tyotulosumma'] # karkea
        elif self.year==2020:
            q['tyotulosumma']=92_123_100_000 #+4_613_400_000+1_239_900_000 # lähde: ETK, tyel + julkinen + yel + myel
            q['tyotulosumma eielakkeella']=np.nan #+4_613_400_000+1_239_900_000 # lähde: ETK, tyel + julkinen + yel + myel
            q['etuusmeno']=0
            q['verot+maksut']=0   # tuloverot 30_763_000_000 ml YLE ja kirkollisvero
            q['verot+maksut+alv']=0   # tuloverot 30_763_000_000 ml YLE ja kirkollisvero
            q['valtionvero']=5_542_000_000 # vai 7_700_000_000
            q['kunnallisvero']=20_480_000_000
            q['ptel']=6_486_150_000
            q['elakemaksut']=22_085_700_000 # Lähde: ETK
            q['tyottomyysvakuutusmaksu']=0.019*q['tyotulosumma']
            q['tyoelakemaksu']=21_982_900_000
            q['sairausvakuutusmaksu']=1_335_000_000+407_000_000
            q['ylevero']=497_000_000
            q['ansiopvraha']=2_692_412_893 # Kelasto
            q['peruspvraha']=2_264_825_365 # Kelasto
            q['asumistuki']=1_566_478_510 + 636_232_831 # yleinen plus eläkkeensaajan
            q['tyoelakemeno']=27_865_000_000
            q['kansanelakemeno']=2_211_425_285
            q['takuuelakemeno']=2_515_000_000-q['kansanelakemeno']
            q['kokoelakemeno']=q['tyoelakemeno']+2_357_000_000
            q['elatustuki']=208_633_000
            q['lapsilisa']=1_375_073_409
            q['opintotuki']=417_404_073+54_057
            q['isyyspaivaraha']=104_212_164
            q['aitiyspaivaraha']=341_304_991+462_228_789
            q['kotihoidontuki']=245_768_701
            q['sairauspaivaraha']=906_036_060
            q['toimeentulotuki']=715_950_847
            #q['perustulo']=0
            q['pvhoitomaksu']=271_000_000
            q['alv']=19_354_000_000 #21_775_000_000
            q['ta_maksut']=0.2057*q['tyotulosumma'] # karkea
        elif self.year==2021:
            q['tyotulosumma']=96_602_200_000 # lähde: ETK, tyel + julkinen + yel + myel
            q['tyotulosumma eielakkeella']=np.nan #+4_613_400_000+1_239_900_000 # lähde: ETK, tyel + julkinen + yel + myel
            q['etuusmeno']=0
            q['verot+maksut']=0   # tuloverot 30_763_000_000 ml YLE ja kirkollisvero
            q['verot+maksut+alv']=0   # tuloverot 30_763_000_000 ml YLE ja kirkollisvero
            q['valtionvero']=5_542_000_000 # vai 7_700_000_000
            q['kunnallisvero']=20_480_000_000
            q['ptel']=6_816_800_000
            q['elakemaksut']=22_085_700_000 # Lähde: ETK
            q['tyottomyysvakuutusmaksu']=0.019*q['tyotulosumma']
            q['tyoelakemaksu']=21_982_900_000
            q['sairausvakuutusmaksu']=1_335_000_000+407_000_000
            q['ylevero']=497_000_000
            q['ansiopvraha']=2_482_485_746 # Kelasto
            q['peruspvraha']=2_154_726_201 # Kelasto
            q['asumistuki']=1_590_774_842 + 646_939_420 # yleinen plus eläkkeensaajan
            q['tyoelakemeno']=27_865_000_000
            q['kansanelakemeno']=2_158_018_883
            q['takuuelakemeno']=2_515_000_000-q['kansanelakemeno']
            q['kokoelakemeno']=q['tyoelakemeno']+2_357_000_000
            q['elatustuki']=215_556_000
            q['lapsilisa']=1_362_112_599
            q['opintotuki']=417_404_073+54_057
            q['isyyspaivaraha']=104_212_164
            q['aitiyspaivaraha']=341_304_991+462_228_789
            q['kotihoidontuki']=245_768_701
            q['sairauspaivaraha']=1_039_110_731
            q['toimeentulotuki']=715_950_847
            #q['perustulo']=0
            q['pvhoitomaksu']=271_000_000
            q['alv']=20_217_000_000 #21_775_000_000
            q['ta_maksut']=0.2057*q['tyotulosumma'] # karkea
        elif self.year==2022:
            q['tyotulosumma']=97_603_000_000 #+4_613_400_000+1_239_900_000 # lähde: ETK, tyel + julkinen + yel + myel
            q['tyotulosumma eielakkeella']=np.nan #+4_613_400_000+1_239_900_000 # lähde: ETK, tyel + julkinen + yel + myel
            q['etuusmeno']=0
            q['verot+maksut']=0   # tuloverot 30_763_000_000 ml YLE ja kirkollisvero
            q['verot+maksut+alv']=0   # tuloverot 30_763_000_000 ml YLE ja kirkollisvero
            q['valtionvero']=5_542_000_000 # vai 7_700_000_000
            q['kunnallisvero']=20_480_000_000
            q['ptel']=6_816_800_000
            q['elakemaksut']=22_085_700_000 # Lähde: ETK
            q['tyottomyysvakuutusmaksu']=0.019*q['tyotulosumma']
            q['tyoelakemaksu']=21_982_900_000
            q['sairausvakuutusmaksu']=1_335_000_000+407_000_000
            q['ylevero']=497_000_000
            q['ansiopvraha']=3_895_333_045 # 1_930_846_464+1_964_486_581 # ansioturva + perusturva = 3 895 333 045
            q['peruspvraha']=1_869_864_476 # Kelasto
            q['asumistuki']=1_488_900_000 + 600_100_000 # yleinen plus eläkkeensaajan
            q['tyoelakemeno']=27_865_000_000
            q['kansanelakemeno']=2_211_425_285
            q['takuuelakemeno']=2_515_000_000-q['kansanelakemeno']
            q['kokoelakemeno']=q['tyoelakemeno']+2_357_000_000
            q['elatustuki']=215_556_000
            q['lapsilisa']=1_375_100_000
            q['opintotuki']=417_404_073+54_057
            q['isyyspaivaraha']=104_212_164
            q['aitiyspaivaraha']=341_304_991+462_228_789
            q['kotihoidontuki']=245_768_701
            q['sairauspaivaraha']=1_039_110_731
            q['toimeentulotuki']=715_950_847
            #q['perustulo']=0
            q['pvhoitomaksu']=271_000_000
            q['alv']=20_217_000_000 #21_775_000_000
            q['ta_maksut']=0.2057*q['tyotulosumma'] # karkea
        elif self.year==2023:
            kerroin=1.03
            q['tyotulosumma']=97_603_000_000*kerroin #+4_613_400_000+1_239_900_000 # lähde: ETK, tyel + julkinen + yel + myel
            q['tyotulosumma eielakkeella']=np.nan #+4_613_400_000+1_239_900_000 # lähde: ETK, tyel + julkinen + yel + myel
            q['etuusmeno']=0
            q['verot+maksut']=0   # tuloverot 30_763_000_000 ml YLE ja kirkollisvero
            q['verot+maksut+alv']=0   # tuloverot 30_763_000_000 ml YLE ja kirkollisvero
            q['valtionvero']=17_000_000_000 # ok?
            q['kunnallisvero']=8_000_000_000 # ok?
            q['ptel']=6_816_800_000
            q['elakemaksut']=22_085_700_000*kerroin # Lähde: ETK
            q['tyottomyysvakuutusmaksu']=0.019*q['tyotulosumma']
            q['tyoelakemaksu']=21_982_900_000*kerroin
            q['sairausvakuutusmaksu']=(1_335_000_000+407_000_000)*kerroin
            q['ylevero']=497_000_000*kerroin
            q['ansiopvraha']=3_895_333_045*kerroin # 1_930_846_464+1_964_486_581 # ansioturva + perusturva = 3 895 333 045
            q['peruspvraha']=1_869_864_476*kerroin # Kelasto
            q['asumistuki']=(1_488_900_000 + 600_100_000)*kerroin # yleinen plus eläkkeensaajan
            q['tyoelakemeno']=27_865_000_000*kerroin
            q['kansanelakemeno']=2_211_425_285*kerroin
            q['takuuelakemeno']=(2_515_000_000-q['kansanelakemeno'])*kerroin
            q['kokoelakemeno']=(q['tyoelakemeno']+2_357_000_000)*kerroin
            q['elatustuki']=215_556_000*kerroin
            q['lapsilisa']=1_375_100_000*kerroin
            q['opintotuki']=(417_404_073+54_057)*kerroin
            q['isyyspaivaraha']=104_212_164*kerroin
            q['aitiyspaivaraha']=(341_304_991+462_228_789)*kerroin
            q['kotihoidontuki']=245_768_701*kerroin
            q['sairauspaivaraha']=1_039_110_731*kerroin
            q['toimeentulotuki']=715_950_847*kerroin
            #q['perustulo']=0
            q['pvhoitomaksu']=271_000_000*kerroin
            q['alv']=20_217_000_000*kerroin #21_775_000_000
            q['ta_maksut']=0.2057*q['tyotulosumma'] # karkea                        
        elif self.year==2024: # update
            kerroin=1.03*1.01
            q['tyotulosumma']=97_603_000_000*kerroin #+4_613_400_000+1_239_900_000 # lähde: ETK, tyel + julkinen + yel + myel
            q['tyotulosumma eielakkeella']=np.nan #+4_613_400_000+1_239_900_000 # lähde: ETK, tyel + julkinen + yel + myel
            q['etuusmeno']=0
            q['verot+maksut']=0   # tuloverot 30_763_000_000 ml YLE ja kirkollisvero
            q['verot+maksut+alv']=0   # tuloverot 30_763_000_000 ml YLE ja kirkollisvero
            q['valtionvero']=17_000_000_000 # ok?
            q['kunnallisvero']=8_000_000_000 # ok?
            q['ptel']=6_816_800_000
            q['elakemaksut']=22_085_700_000*kerroin # Lähde: ETK
            q['tyottomyysvakuutusmaksu']=0.019*q['tyotulosumma']
            q['tyoelakemaksu']=21_982_900_000*kerroin
            q['sairausvakuutusmaksu']=(1_335_000_000+407_000_000)*kerroin
            q['ylevero']=497_000_000*kerroin
            q['ansiopvraha']=3_895_333_045*kerroin # 1_930_846_464+1_964_486_581 # ansioturva + perusturva = 3 895 333 045
            q['peruspvraha']=1_869_864_476*kerroin # Kelasto
            q['asumistuki']=(1_488_900_000 + 600_100_000)*kerroin # yleinen plus eläkkeensaajan
            q['tyoelakemeno']=27_865_000_000*kerroin
            q['kansanelakemeno']=2_211_425_285*kerroin
            q['takuuelakemeno']=(2_515_000_000-q['kansanelakemeno'])*kerroin
            q['kokoelakemeno']=(q['tyoelakemeno']+2_357_000_000)*kerroin
            q['elatustuki']=215_556_000*kerroin
            q['lapsilisa']=1_375_100_000*kerroin
            q['opintotuki']=(417_404_073+54_057)*kerroin
            q['isyyspaivaraha']=104_212_164*kerroin
            q['aitiyspaivaraha']=(341_304_991+462_228_789)*kerroin
            q['kotihoidontuki']=245_768_701*kerroin
            q['sairauspaivaraha']=1_039_110_731*kerroin
            q['toimeentulotuki']=715_950_847*kerroin
            #q['perustulo']=0
            q['pvhoitomaksu']=271_000_000*kerroin
            q['alv']=20_217_000_000*kerroin #21_775_000_000
            q['ta_maksut']=0.2057*q['tyotulosumma'] # karkea                                                   

        q['tyottomyyspvraha']=q['ansiopvraha']+q['peruspvraha']
        q['etuusmeno']=q['tyottomyyspvraha']+q['kokoelakemeno']+q['opintotuki']+q['isyyspaivaraha']+\
            q['aitiyspaivaraha']+q['sairauspaivaraha']+q['toimeentulotuki']+\
            q['asumistuki']+q['kotihoidontuki']+q['elatustuki']+q['lapsilisa']#+q['perustulo']+\
        q['verotettava etuusmeno']=q['kokoelakemeno']+q['tyottomyyspvraha']+q['aitiyspaivaraha']+q['isyyspaivaraha']
            
        #q['etuusmeno_v2']=q['etuusmeno']
        q['verot+maksut']=q['valtionvero']+q['kunnallisvero']+q['ptel']+q['tyottomyysvakuutusmaksu']+\
            q['ylevero']+q['sairausvakuutusmaksu']
        q['verot+maksut+alv']=q['verot+maksut']+q['alv']
        q['palkkaverot+maksut']=np.nan

        q['nettotulot']=q['tyotulosumma']+q['etuusmeno']-q['verot+maksut+alv']-q['pvhoitomaksu']
        #q['tulot_netto_v2']=q['tyotulosumma']+q['etuusmeno']-q['verot+maksut+alv']-q['pvhoitomaksu']
        q['muut tulot']=q['etuusmeno']-q['verot+maksut+alv']

        return q        
        
    def get_emtr(self):
        ''' 
        ETLAn data
        '''
        x_ptr=np.array([8.8,9.6,10.4,11.2,12,12.8,13.6,14.4,15.2,16,16.8,17.6,18.4,19.2,20,20.8,21.6,22.4,23.2,24,24.8,25.6,26.4,27.2,28,28.8,29.6,30.4,31.2,32,32.8,33.6,34.4,35.2,36,36.8,37.6,38.4,39.2,40,40.8,41.6,42.4,43.2,44,44.8,45.6,46.4,47.2,48,48.8,49.6,50.4,51.2,52,52.8,53.6,54.4,55.2,56,56.8,57.6,58.4,59.2,60,60.8,61.6,62.4,63.2,64,64.8,65.6,66.4,67.2,68,68.8,69.6,70.4,71.2,72,72.8,73.6,74.4,75.2,76,76.8,77.6,78.4,79.2,80,80.8,81.6,82.4,83.2,84,84.8,85.6,86.4,87.2,88,88.8,89.6,90.4,91.2,92,92.8,93.6,94.4,95.2,96,96.8,97.6,98.4,99.2,100])
        ptr=np.array([0.000525366,0,0,0.000262683,0.000262683,0.000262683,0,0,0.000788049,0.000525366,0.000262683,0.001576098,0.001313415,0.00262683,0.00525366,0.008668539,0.010244637,0.009456588,0.01313415,0.019963907,0.015760979,0.021540005,0.021802688,0.022590737,0.023116103,0.034936838,0.037563668,0.039927815,0.049909768,0.054900745,0.059366356,0.074864653,0.087736119,0.110064173,0.12030881,0.121622225,0.117419297,0.131866862,0.134756375,0.143950279,0.152093452,0.159973942,0.166541017,0.187818339,0.24849811,1.158694676,1.153441016,1.683009927,1.833001915,1.669087728,1.369103752,1.257200798,1.108259541,0.968774873,0.876047777,0.878674607,0.916500957,0.941718525,1.003449028,0.940667793,0.971664386,0.92727096,0.937252914,0.969037556,0.950649746,0.977968777,0.978494143,0.958792919,0.964571945,0.989526829,1.218849081,1.491514026,2.494437688,3.807589962,5.078712958,7.660098716,10.51940308,8.477568186,4.591436009,3.597180886,3.236517139,3.043707823,2.09778637,1.662520653,1.348877162,1.197046392,1.071221239,0.985061218,0.85529582,0.815105323,0.756527016,0.672731141,0.554261112,0.449713282,0.364341309,0.29236617,0.25375177,0.199376391,0.18177663,0.146839792,0.124249055,0.112165637,0.102446367,0.115843199,0.125825153,0.1281893,0.111377588,0.082745142,0.055951477,0.034936838,0.025742933,0.011295369,0.007355124,0.006041709,0.037300985])/100
        x_emtr=np.array([10.8,11.6,12.4,13.2,14,14.8,15.6,16.4,17.2,18,18.8,19.6,20.4,21.2,22,22.8,23.6,24.4,25.2,26,26.8,27.6,28.4,29.2,30,30.8,31.6,32.4,33.2,34,34.8,35.6,36.4,37.2,38,38.8,39.6,40.4,41.2,42,42.8,43.6,44.4,45.2,46,46.8,47.6,48.4,49.2,50,50.8,51.6,52.4,53.2,54,54.8,55.6,56.4,57.2,58,58.8,59.6,60.4,61.2,62,62.8,63.6,64.4,65.2,66,66.8,67.6,68.4,69.2,70,70.8,71.6,72.4,73.2,74,74.8,75.6,76.4,77.2,78,78.8,79.6,80.4,81.2,82,82.8,83.6,84.4,85.2,86,86.8,87.6,88.4,89.2,90])
        emtr=np.array([0.241111149,0.231445805,0.342989099,0.251821395,0.240327472,0.794125561,1.524773322,0.865440126,0.673178148,0.494238671,0.415609792,0.394450525,0.451397687,0.63869638,0.656459715,1.024265238,0.896003511,0.73012531,0.642092312,0.461846708,0.359968757,0.31268694,0.287348065,0.262792866,0.273503113,0.266450024,0.30798488,0.352654443,0.537602107,0.525846958,0.795431688,1.518503909,1.667141226,1.980873068,2.304531479,3.211245236,3.068877331,2.125330777,1.08878794,1.326241931,0.92343219,1.176820938,2.000464981,4.848084303,4.638581441,6.747977461,6.3859189,6.227093788,3.312861961,2.492875074,3.082461058,3.310772156,1.682814757,0.940673074,0.63112084,0.840884928,0.756247861,0.771137715,1.136592209,0.714190554,0.733782467,0.610484025,0.399152584,0.258874484,0.196180361,0.145502611,0.126433148,0.119902511,0.115200451,0.125388246,0.233274383,0.154384278,0.218123304,0.390009691,0.374074935,0.250254042,0.212637568,0.2160335,0.173714966,0.117290256,0.079412556,0.07627785,0.08385339,0.076539075,0.083592164,0.092735057,0.077061526,0.07105334,0.062955349,0.05067775,0.049632848,0.048587945,0.053290005,0.047804269,0.038922601,0.039967504,0.038661376,0.031869513,0.029518483,0.025861326])/100
        
        return x_ptr,ptr,x_emtr,emtr
        
